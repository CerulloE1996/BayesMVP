
####### -----  Clear include and library paths 
INCLUDE_PATH=
LIBRARY_PATH=

## override R_BIN_PATH="C:\Program Files\R\R-4.4.2\bin\x64"
## $(info R_BIN_PATH is: $(R_BIN_PATH))

####### -----  BayesMVP  paths
$(info R_HOME is: $(R_HOME))

# Get R library path (this will work for any R version)
## R_LIB_PATH = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(.libPaths()[grep('00LOCK|00new', .libPaths(), invert=TRUE)][1])")
## $(info R_LIB_PATH is: $(R_LIB_PATH))

PKG_SRC_PATH=$(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(getwd())")
$(info PKG_SRC_PATH is: $(PKG_SRC_PATH))
##
PKG_PATH=$(patsubst %/src,%,$(PKG_SRC_PATH))
$(info PKG_PATH is: $(PKG_PATH))
##
PKG_LIB_PATH=$(PKG_PATH)/lib
$(info PKG_LIB_PATH is: $(PKG_LIB_PATH))
##
PKG_INST_PATH=$(PKG_PATH)/inst
$(info PKG_INST_PATH is: $(PKG_INST_PATH))
##
PKG_LIB_ARCH_PATH = $(PKG_PATH)/libs$(R_ARCH)
$(info PKG_LIB_ARCH_PATH is: $(PKG_LIB_ARCH_PATH))
##


####### ----- RTools path (root dir)
override RTOOLS_PATH=C:/rtools44
$(info RTOOLS_PATH is: $(RTOOLS_PATH))

####### ----- RTools paths (using MINGW64)
override RTOOLS_MINGW_PATH=$(RTOOLS_PATH)/mingw64
$(info RTOOLS_MINGW_PATH is: $(RTOOLS_MINGW_PATH))
override RTOOLS_MINGW_LIB_PATH=$(RTOOLS_MINGW_PATH)/lib
$(info RTOOLS_MINGW_LIB_PATH is: $(RTOOLS_MINGW_LIB_PATH))
override RTOOLS_MINGW_BIN_PATH=$(RTOOLS_MINGW_PATH)/bin
$(info RTOOLS_MINGW_BIN_PATH is: $(RTOOLS_MINGW_BIN_PATH))


####### ----- RTools paths (using CLANG64 i.e. *DIRECLTY* [i.e., not via gcc]  ------------------------------
####### ----- using the clang toolchains  + clang as the COMPILER (NOT g++))   ------------------------------
override RTOOLS_CLANG64_PATH=$(RTOOLS_PATH)/clang64
$(info RTOOLS_CLANG64_PATH is: $(RTOOLS_CLANG64_PATH))
override RTOOLS_CLANG64_LIB_PATH=$(RTOOLS_CLANG64_PATH)/lib
$(info RTOOLS_CLANG64_LIB_PATH is: $(RTOOLS_CLANG64_LIB_PATH))
override RTOOLS_CLANG64_BIN_PATH=$(RTOOLS_CLANG64_PATH)/bin
$(info RTOOLS_CLANG64_BIN_PATH is: $(RTOOLS_CLANG64_BIN_PATH))
override RTOOLS_CLANG64_INCLUDE_PATH=$(RTOOLS_CLANG64_PATH)/include
$(info RTOOLS_CLANG64_INCLUDE_PATH is: $(RTOOLS_CLANG64_INCLUDE_PATH))
override RTOOLS_CLANG64_LIBCXX_INCLUDE_PATH=$(RTOOLS_CLANG64_INCLUDE_PATH)/c++/v1
$(info RTOOLS_CLANG64_LIBCXX_INCLUDE_PATH is: $(RTOOLS_CLANG64_LIBCXX_INCLUDE_PATH))


####### ----- ccache paths -----  ccache directory e.g.: "C:/rtools44/mingw64/bin/ccache.exe"
override CCACHE = "$(RTOOLS_MINGW_BIN_PATH)/ccache.exe"
$(info CCACHE is: $(CCACHE))

#####    Compiler settings    
### To use RTools-CLANG64 clang:
override CXX_COMPILER_TYPE = $(CCACHE) $(RTOOLS_CLANG64_BIN_PATH)/clang++
override CPP_COMPILER_TYPE = $(CCACHE) $(RTOOLS_CLANG64_BIN_PATH)/clang
override CXX_STD = CXX17 # Use C++17


####### ----- RTools-CLANG64 OpenMP paths
override SHLIB_OPENMP_CFLAGS = -I"$(RTOOLS_CLANG64_BIN_PATH)"  -fopenmp=libomp
override SHLIB_OPENMP_CXXFLAGS = $(SHLIB_OPENMP_CFLAGS)

RTOOLS_INCLUDE_PATHS =  -I"$(RTOOLS_CLANG64_LIBCXX_INCLUDE_PATH)" \
                        -I"$(RTOOLS_CLANG64_BIN_PATH)" \
                        -I"$(RTOOLS_CLANG64_INCLUDE_PATH)" \
                        $(SHLIB_OPENMP_CFLAGS)
$(info RTOOLS_INCLUDE_PATHS: $(RTOOLS_INCLUDE_PATHS))

override BASE_FLAGS =   -O3  -march=native  -mtune=native \
                        -Wno-error=ignored-attributes \
                        -Wno-error=implicit-function-declaration \
                        -Wno-pragma-pack \
                        $(RTOOLS_INCLUDE_PATHS) -nostdinc++ -stdlib=libc++ \
                        -fPIC \
                        -D_REENTRANT -DSTAN_THREADS -pthread \
                        -fpermissive \
                        -DNDEBUG \
                        -mfma \
                        -mavx -mavx2 \
                        -v


##### CmDStan / Stan path(s)  ------------------------------------------------------------------------------
# Get Windows user profile directory directly
HOME = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(gsub('\\\\\\\\', '/', Sys.getenv('USERPROFILE')))")/
$(info HOME is: $(HOME))

# Find cmdstan path with debug output
$(info Checking for .cmdstan in: $(HOME)/.cmdstan)
$(info Checking for cmdstan in: $(HOME)/cmdstan)

CMDSTAN_DIR = $(shell \
  if [ -d "$(HOME)/.cmdstan" ]; then \
    ls -d "$(HOME)/.cmdstan/cmdstan-"* 2>/dev/null | sort -rV | head -n1; \
  elif [ -d "$(HOME)/cmdstan" ]; then \
    echo "$(HOME)/cmdstan"; \
  fi)
 
CMDSTAN_PATH=$(CMDSTAN_DIR)
$(info CMDSTAN_PATH found: $(CMDSTAN_PATH))
STAN_ROOT=$(CMDSTAN_PATH)/stan
$(info STAN_ROOT is: $(STAN_ROOT))
STAN_SRC=$(CMDSTAN_PATH)/stan/src
$(info STAN_SRC is: $(STAN_SRC))
STAN_BASE=$(CMDSTAN_PATH)/stan/src/stan
$(info STAN_BASE is: $(STAN_BASE))
STAN_LIB=$(CMDSTAN_PATH)/stan/lib
$(info STAN_LIB is: $(STAN_LIB))
STAN_MATH=$(CMDSTAN_PATH)/stan/lib/stan_math
$(info STAN_MATH is: $(STAN_MATH))
STAN_MATH_LIB=$(CMDSTAN_PATH)/stan/lib/stan_math/lib
$(info STAN_MATH_LIB is: $(STAN_MATH_LIB))


# Try alternative path finding
CMDSTAN_ALT = $(shell echo "$$CMDSTAN")
$(info CMDSTAN env var is: '$(CMDSTAN_ALT)')

 
##### BRIDGESTAN path(s)  ------------------------------------------------------------------------------
HOME = $(subst \,/,$(USERPROFILE))
BRIDGESTAN_PATH = $(shell \
  if [ -d "$(HOME)/.bridgestan/bridgestan-2.5.0" ]; then \
    echo "$(HOME)/.bridgestan/bridgestan-2.5.0"; \
  else \
    ls -d "$(HOME)/.bridgestan/bridgestan-"* 2>/dev/null | grep "bridgestan-[0-9]" | sort -r | head -n1; \
  fi)

ifeq ($(strip $(BRIDGESTAN_PATH)),)
BRIDGESTAN_PATH = $(shell \
  if [ -d "C:/bridgestan-2.5.0" ]; then \
    echo "C:/bridgestan-2.5.0"; \
  else \
    ls -d "C:/bridgestan-"* 2>/dev/null | grep "bridgestan-[0-9]" | sort -r | head -n1; \
  fi)
endif

ifeq ($(strip $(BRIDGESTAN_PATH)),)
  $(warning BridgeStan not found in standard locations. Installation will proceed assuming BridgeStan is in system path.)
endif

$(info BRIDGESTAN_PATH is: $(BRIDGESTAN_PATH))
BRIDGESTAN_SRC=$(BRIDGESTAN_PATH)/src
$(info BRIDGESTAN_SRC is: $(BRIDGESTAN_SRC))
BRIDGESTAN_STAN_MATH_LIB=$(BRIDGESTAN)/stan/lib/stan_math/lib
$(info BRIDGESTAN_STAN_MATH_LIB is: $(BRIDGESTAN_STAN_MATH_LIB))


##### TBB path(s)  ----------------------------------------------------------------------------------------------------------------------
## if using cmdstan tbb: 
TBB_PATH=$(STAN_MATH_LIB)/tbb
$(info TBB_PATH is: $(TBB_PATH))
TBB_DLL="$(PKG_INST_PATH)/tbb_stan/tbb.dll"## using the tbb.dll bundled with the package (which is CmDStan's tbb.dll)
$(info TBB_DLL is: $(TBB_DLL))

##### PKG_CPPFLAGS / PKG_CXXFLAGS / CPPFLAGS / CXXFLAGS --------------------------------------------------------------------------------
override  PKG_CPPFLAGS = $(BASE_FLAGS) \
    -I"$(STAN_MATH_LIB)/boost_1.84.0" \
    -I"$(STAN_MATH_LIB)/eigen_3.4.0" \
    -I"$(STAN_MATH_LIB)/sundials_6.1.1/include" \
    -I"$(STAN_MATH_LIB)/sundials_6.1.1" \
    -I"$(STAN_LIB)/rapidjson_1.1.0" \
    -I"$(STAN_LIB)/rapidjson_1.1.0/rapidjson" \
    -I"$(TBB_PATH)" \
    -I"$(STAN_MATH)" \
    -I"$(STAN_MATH_LIB)" \
    -I"$(STAN_ROOT)" \
    -I"$(STAN_SRC)" \
    -I"$(STAN_BASE)/model" \
    -I"$(STAN_BASE)/services" \
    -I"$(STAN_BASE)/io" \
    -I"$(STAN_BASE)/mcmc" \
    -I"$(STAN_BASE)/analyze" \
    -I"$(BRIDGESTAN_SRC)"

override PKG_CXXFLAGS = $(PKG_CPPFLAGS)
override CPPFLAGS = $(PKG_CPPFLAGS)
override CXXFLAGS = $(PKG_CPPFLAGS)

override CC  =  $(CPP_COMPILER_TYPE) 
override CXX =  $(CXX_COMPILER_TYPE) 

override CFLAGS =  $(CPPFLAGS)
override CC14 = $(CC)
override C14FLAGS = $(CPPFLAGS)
override CC17 = $(CC)
override C17FLAGS = $(CPPFLAGS)
override CC23 =  $(CC)
override C23FLAGS =  $(CPPFLAGS)
override CC90 =  $(CC)
override C90FLAGS = $(CPPFLAGS)
override CC99 =  $(CC)
override 99FLAGS = $(CPPFLAGS)

override CXXPICFLAGS = -fpic
override CXX11  =  $(CXX)
override CXX11FLAGS = $(CXXFLAGS)
override CXX11PICFLAGS = -fpic
override CXX14  =   $(CXX)
override CXX14FLAGS = $(CXXFLAGS)
override CXX14PICFLAGS = -fpic
override CXX17  =  $(CXX)
override CXX17FLAGS =  $(CXXFLAGS)
override CXX17PICFLAGS = -fpic
override CXX20  = $(CXX)
override CXX20FLAGS =   $(CXXFLAGS)
override CXX20PICFLAGS = -fpic
override CXX23  =  $(CXX)
override CXX23FLAGS =   $(CXXFLAGS)
override CXX23PICFLAGS = -fpic


##  ---------------------  Configure package libs (For RTools) ---------------------------------------------------------------------
override LD = $(RTOOLS_CLANG64_BIN_PATH)/clang++
override SHLIB_LD = $(RTOOLS_CLANG64_BIN_PATH)/clang++

# Link paths and libraries (PKG_LIBS) --------------
## PKG_LIBS+=-L"$(LLVM_MINGW_LIB_PATH)" -lc++abi # libc++abi.a is static
override PKG_LIBS=-L"$(RTOOLS_CLANG64_LIB_PATH)" -lR -lc++ -lpthread -fopenmp=libomp

# Linker settings (LDFLAGS) --------------
## override LDFLAGS = $(BASE_FLAGS)
override LDFLAGS+=-L"$(RTOOLS_CLANG64_LIB_PATH)" -fuse-ld=lld -stdlib=libc++ ##  -nostdlib++

##  ---------------------  TBB libs --------------------------------
override PKG_LIBS+=$(TBB_DLL)# using the tbb.dll bundled with BayesMVP 
override PKG_LIBS+=-L"$(TBB_PATH)" -ltbb -lpthread ## using cmdstan tbb lib

##  ---------------------  Dummy model libs --------------------------------
override DUMMY_MODEL_SO="$(PKG_INST_PATH)/dummy_stan_model_win_model.so"
$(info DUMMY_MODEL_SO is: $(DUMMY_MODEL_SO))
override PKG_LIBS+=$(DUMMY_MODEL_SO) ## load the .so BEFORE the .dll (Windows only)

override DUMMY_MODEL_DLL="$(PKG_INST_PATH)/dummy_stan_model_win_model.dll"
$(info DUMMY_MODEL_DLL is: $(DUMMY_MODEL_DLL))
override PKG_LIBS+=$(DUMMY_MODEL_DLL)



RTOOLS_CLANG64_LIBCXX_DLL = "$(RTOOLS_CLANG64_BIN_PATH)/libc++.dll"
$(info RTOOLS_CLANG64_LIBCXX_DLL is: $(RTOOLS_CLANG64_LIBCXX_DLL))

## PKG_LIB_PATH = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(file.path(.libPaths()[1]))")
## $(info PKG_LIB_PATH is: $(PKG_LIB_PATH))
## PKG_LIB_ARCH_PATH = $(subst /,\\,$(PKG_LIB_PATH))\\BayesMVP\\libs\\x64
## $(info PKG_LIB_ARCH_PATH is: $(PKG_LIB_ARCH_PATH))

## PKG_LIBS_PATH = $(R_PACKAGE_DIR)/libs$(R_ARCH)
## $(info PKG_LIBS_PATH is: $(PKG_LIBS_PATH))

## pre-shlib:
##   -mkdir -p "$(PKG_LIB_ARCH_PATH)"
##   -cp $(RTOOLS_CLANG64_LIBCXX_DLL) "$(PKG_LIB_ARCH_PATH)"
## 
## .PHONY: pre-shlib

## $(SHLIB): pre-shlib


.PHONY: $(SHLIB)
$(SHLIB): $(OBJECTS)
	-mkdir -p "$(PKG_LIB_ARCH_PATH)"
	-cp $(RTOOLS_CLANG64_LIBCXX_DLL) "$(PKG_LIB_ARCH_PATH)"
	$(SHLIB_LD) $(SHLIB_LDFLAGS) $(DLLFLAGS) -o $@ $(OBJECTS) $(ALL_LIBS)













