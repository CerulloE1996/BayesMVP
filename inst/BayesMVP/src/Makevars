





####### -----  BayesmMVP  path
ifeq ($(OS),Windows_NT)
   ##  PKG_PATH = $(shell cd)
     PKG_PATH = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(getwd())")
else
     PKG_PATH = $(shell pwd)
endif

$(info PKG_PATH is: $(PKG_PATH))
BASE_PKG_PATH = $(patsubst %/src, %, $(PKG_PATH))
$(info BASE_PKG_PATH is: $(BASE_PKG_PATH))
PKG_LIB_PATH =  $(BASE_PKG_PATH)/lib
$(info PKG_LIB_PATH is: $(PKG_LIB_PATH))
PKG_INST_PATH =  $(BASE_PKG_PATH)/inst
$(info PKG_INST_PATH is: $(PKG_INST_PATH))
PKG_R_PATH =  $(BASE_PKG_PATH)/R
$(info PKG_R_PATH is: $(PKG_R_PATH))



#####    Compiler settings     ###  ccache ## znver3 ## znver4 ## znver5 ## native
### set compiler types
# CXX_COMPILER_TYPE =     ccache g++
# CPP_COMPILER_TYPE =     ccache gcc
# BASE_FLAGS =  -O3  -march=native  -mtune=native   -D_REENTRANT    -DSTAN_THREADS -pthread  -fPIC
# BASE_FLAGS +=  -finline-limit=20000000 ## for g++

 # PKG_LIBS = -L/usr/lib/gcc/x86_64-linux-gnu/11 -lgomp  ### for g++
# PKG_CXXFLAGS += -fopenmp ### for g++
# BASE_FLAGS +=  -fopenmp ### for g++


## clang AOCC -specific flags:
#CXX_COMPILER_TYPE =    ccache    /opt/AMD/aocc-compiler-5.0.0/bin/clang++
#CPP_COMPILER_TYPE =    ccache    /opt/AMD/aocc-compiler-5.0.0/bin/clang
#BASE_FLAGS =  -O3  -march=znver4  -mtune=znver4 
#PKG_LIBS += -L"/opt/AMD/aocc-compiler-5.0.0/lib" -lomp ## for AMD AOCC clang++
#PKG_LIBS += /opt/AMD/aocc-compiler-5.0.0/lib/libomp.so
#BASE_FLAGS +=  -fopenmp -fopenmp-simd ## for AMD AOCC clang++
# BASE_FLAGS +=  -mllvm   ### --openmp-opt-shared-limit=96  ### -inlinehint-threshold=20000000 # for clang++


## Default flags:
CXX_COMPILER_TYPE = $(shell which ccache >/dev/null 2>&1 && echo "ccache g++" || echo "g++")
CPP_COMPILER_TYPE = $(shell which ccache >/dev/null 2>&1 && echo "ccache gcc" || echo "gcc")

BASE_FLAGS =  -O3  -march=native  -mtune=native # initial base flags
BASE_FLAGS += -fPIC    -D_REENTRANT  -DSTAN_THREADS -pthread
BASE_FLAGS +=  -fopenmp 


 

# Use C++17
CXX_STD = CXX17


BASE_FLAGS +=  -fpermissive
BASE_FLAGS +=  -DNDEBUG  -ffp-contract=fast

BASE_FLAGS +=  -mfma -mavx -mavx2
BASE_FLAGS +=    -mfma      -mavx512vl -mavx512dq  -mavx512f



#### BASE_FLAGS +=   -fno-math-errno    -fno-signed-zeros  -fno-trapping-math  ### oordered from safest ( -fno-math-errno ) tto least-safe ( -fno-trapping-math)
BASE_FLAGS += -fno-math-errno
BASE_FLAGS +=  -fno-signed-zeros
BASE_FLAGS +=  -fno-trapping-math

## BASE_FLAGS +=       -DEIGEN_VECTORIZE
 

##### BRIDGESTAN path(s) --------------------------------
## HOME = $(HOME)
BRIDGESTAN = $(shell \
  DOT_PATH=$$(ls -d "$(HOME)/.bridgestan/bridgestan-"* 2>/dev/null | grep "bridgestan-[0-9]" | sort -r | head -n1); \
  if [ -n "$$DOT_PATH" ]; then \
    echo "$$DOT_PATH"; \
  else \
    ls -d "$(HOME)/bridgestan-"* 2>/dev/null | grep "bridgestan-[0-9]" | sort -r | head -n1; \
  fi)

ifeq ($(strip $(BRIDGESTAN)),)
 $(warning BridgeStan not found in standard locations. Installation will proceed assuming BridgeStan is in system path.)
endif

 
BRIDGESTAN_SRC = $(BRIDGESTAN)/src
BRIDGESTAN_STAN_MATH_LIB = $(BRIDGESTAN)/stan/lib/stan_math/lib

$(info BRIDGESTAN is: $(BRIDGESTAN))
$(info BRIDGESTAN_SRC is: $(BRIDGESTAN_SRC))
$(info BRIDGESTAN_STAN_MATH_LIB is: $(BRIDGESTAN_STAN_MATH_LIB))



#### Find Stan / cmdstan path (for Linux / MAC OS X)
# First try to find .cmdstan directory and get latest version
CMDSTAN_PATH = $(shell \
  if [ -d "$(HOME)/.cmdstan" ]; then \
    ls -d "$(HOME)/.cmdstan/cmdstan-"* 2>/dev/null | sort -rV | head -n1 | sed 's/\/stan$$//' ; \
  elif [ -d "$(HOME)/cmdstan" ]; then \
    echo "$(HOME)/cmdstan"; \
  fi)

$(info Using CmdStan: $(CMDSTAN_PATH))

$(info CMDSTAN_PATH found: $(CMDSTAN_PATH))

 

# Define base directories
STAN_ROOT =   $(CMDSTAN_PATH)/stan
STAN_SRC =    $(CMDSTAN_PATH)/stan/src
STAN_BASE =   $(CMDSTAN_PATH)/stan/src/stan
STAN_LIB =    $(CMDSTAN_PATH)/stan/lib
STAN_MATH =   $(CMDSTAN_PATH)/stan/lib/stan_math
STAN_MATH_LIB = $(CMDSTAN_PATH)/stan/lib/stan_math/lib

$(info directories is: $(directories))
$(info STAN_ROOT is: $(STAN_ROOT))
$(info STAN_SRC is: $(STAN_SRC))
$(info STAN_BASE is: $(STAN_BASE))
$(info STAN_LIB is: $(STAN_LIB))
$(info STAN_MATH is: $(STAN_MATH))
$(info STAN_MATH_LIB is: $(STAN_MATH_LIB))


TBB_PATH = $(STAN_MATH)/lib/tbb
TBB_SO = $(TBB_PATH)/libtbb.so.2

## PKG_LIBS = -Wl,-rpath,$(TBB_PATH)

# TBB
PKG_LIBS += $(TBB_SO)

## PKG_LIBS += -Wl,-rpath,$(TBB_PATH)

# link the dummy model .so file
## PKG_LIBS  += $(BASE_PKG_PATH)/inst/dummy_stan_model_model.so
SHLIB_LIBADD += $(BASE_PKG_PATH)/inst/dummy_stan_model_model.so ## link during compilation  
## PKG_LIBS += $(R_PACKAGE_DIR)/inst/dummy_stan_model_model.so -Wl,-rpath,$(TBB_PATH)  ##  link during runtime  

##PKG_LIBS += $(wildcard $(BASE_PKG_PATH)/inst/dummy_stan_model_model.so) -Wl,-rpath,'$$ORIGIN/../inst' -Wl,-rpath,$(TBB_PATH)

# Create .BayesMVP dir and copy model file
$(shell mkdir -p $(HOME)/.BayesMVP)
$(shell cp -f $(BASE_PKG_PATH)/inst/dummy_stan_model_model.so $(HOME)/.BayesMVP/ 2>/dev/null || true)
# Link to permanent location
PKG_LIBS += $(HOME)/.BayesMVP/dummy_stan_model_model.so -Wl,-rpath,$(HOME)/.BayesMVP -Wl,-rpath,$(TBB_PATH)


override PKG_CPPFLAGS = $(BASE_FLAGS) \
    -I"$(STAN_MATH_LIB)/eigen_3.4.0" \
    -I"$(STAN_MATH_LIB)/boost_1.84.0" \
    -I"$(STAN_MATH_LIB)/sundials_6.1.1/include" \
    -I"$(STAN_MATH_LIB)/sundials_6.1.1" \
    -I"$(STAN_MATH_LIB)/tbb/include" \
    -I"$(STAN_LIB)/rapidjson_1.1.0" \
    -I"$(STAN_LIB)/rapidjson_1.1.0/rapidjson" \
    -I"$(CMDSTAN_PATH)" \
    -I"$(STAN_ROOT)" \
    -I"$(STAN_SRC)" \
    -I"$(STAN_MATH)" \
    -I"$(STAN_BASE)" \
    -I"$(STAN_LIB)" \
    -I"$(STAN_MATH_LIB)" \
    -I"$(STAN_BASE)/model" \
    -I"$(STAN_BASE)/services" \
    -I"$(STAN_BASE)/io" \
    -I"$(STAN_BASE)/mcmc" \
    -I"$(STAN_BASE)/analyze" \
    -I"$(STAN_BASE)/callbacks" \
    -I"$(STAN_BASE)/lang" \
    -I"$(STAN_BASE)/optimization" \
    -I"$(STAN_BASE)/variational" \
    -I"$(TBB_PATH)/include" \
    -I"$(TBB_PATH)" \
    -I"$(BRIDGESTAN_SRC)"

 
override PKG_CXXFLAGS = $(PKG_CPPFLAGS)
override CPPFLAGS = $(PKG_CPPFLAGS)
override CXXFLAGS = $(PKG_CPPFLAGS)

override CC  =  $(CPP_COMPILER_TYPE) 
override CXX =  $(CXX_COMPILER_TYPE) 
 
CC =  $(CC)
CFLAGS =  $(CPPFLAGS)
CC14 = $(CC)
C14FLAGS = $(CPPFLAGS)
CC17 = $(CC)
C17FLAGS = $(CPPFLAGS)
CC23 =  $(CC)
C23FLAGS =  $(CPPFLAGS)
CC90 =  $(CC)
C90FLAGS = $(CPPFLAGS)
CC99 =  $(CC)
99FLAGS = $(CPPFLAGS)


CXX =  $(CXX)
CXXPICFLAGS = -fpic
CXX11  =  $(CXX)
CXX11FLAGS = $(CXXFLAGS)
CXX11PICFLAGS = -fpic
CXX14  =   $(CXX)
CXX14FLAGS = $(CXXFLAGS)
CXX14PICFLAGS = -fpic
CXX17  =  $(CXX)
CXX17FLAGS =  $(CXXFLAGS)
CXX17PICFLAGS = -fpic
CXX20  = $(CXX)
CXX20FLAGS =   $(CXXFLAGS)
CXX20PICFLAGS = -fpic
CXX23  =  $(CXX)
CXX23FLAGS =   $(CXXFLAGS)
CXX23PICFLAGS = -fpic




