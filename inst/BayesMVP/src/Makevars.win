### SHLIB = BayesMVP.dll


####### -----  BayesmMVP  path
ifeq ($(OS),Windows_NT)
   ##  PKG_PATH = $(shell cd)
     PKG_PATH = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(getwd())")
else
     PKG_PATH = $(shell pwd)
endif

$(info PKG_PATH is: $(PKG_PATH))

BASE_PKG_PATH = $(patsubst %/src, %, $(PKG_PATH))
$(info BASE_PKG_PATH is: $(BASE_PKG_PATH))
PKG_LIB_PATH =  $(BASE_PKG_PATH)/lib
$(info PKG_LIB_PATH is: $(PKG_LIB_PATH))
PKG_INST_PATH =  $(BASE_PKG_PATH)/inst
$(info PKG_INST_PATH is: $(PKG_INST_PATH))
PKG_R_PATH =  $(BASE_PKG_PATH)/R
$(info PKG_R_PATH is: $(PKG_R_PATH))



#all:
#	@echo "Running setup to configure BayesMVP environment"
#	@Rscript $(PKG_R_PATH)/install_BayesMVP.R.

#####    Compiler settings     ###  ccache
### set compiler types

#CXX_COMPILER_TYPE =     $(BINPREF)$(CCBASE) $(M_ARCH) #  g++ ###   C:/rtools44/x86_64-w64-mingw32.static.posix/bin/g++.exe    #    g++
#CPP_COMPILER_TYPE =     $(BINPREF)$(CCBASE) $(M_ARCH) #  gcc ###   C:/rtools44/x86_64-w64-mingw32.static.posix/bin/gcc.exe   gcc

## Default flags:
override CXX_COMPILER_TYPE = $(shell where /R "C:\rtools44\mingw64\bin" ccache 2>NUL && echo "ccache g++" || echo "g++")
override CPP_COMPILER_TYPE = $(shell where /R "C:\rtools44\mingw64\bin" ccache 2>NUL && echo "ccache gcc" || echo "gcc")
override CXX_STD = -std=gnu++17 # Use C++17

override BASE_FLAGS =   -O3  -march=native  -mtune=native \
                        -fPIC    -D_REENTRANT  -DSTAN_THREADS -pthread \
                        -fopenmp  \
                        -fpermissive \
                        -DNDEBUG  -ffp-contract=fast \
                        -mfma -mavx -mavx2 \
                        -mavx512vl -mavx512dq  -mavx512f \
                        -fno-math-errno  -fno-signed-zeros  -fno-trapping-math \
                        -flarge-source-files
 
 


# Get Windows user profile directory directly
HOME = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(gsub('\\\\\\\\', '/', Sys.getenv('USERPROFILE')))")/
$(info HOME is: $(HOME))


# Get R library path (this will work for any R version)
R_LIB_PATH = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(.libPaths()[grep('00LOCK|00new', .libPaths(), invert=TRUE)][1])")


# Debug current environment
$(info HOME directory is: $(HOME))
$(info Current directory is: $(shell pwd))
$(info Checking for .cmdstan in: $(HOME)/.cmdstan)
$(info Checking for cmdstan in: $(HOME)/cmdstan)

# Find cmdstan path with debug output
CMDSTAN_DIR = $(shell \
  if [ -d "$(HOME)/.cmdstan" ]; then \
    ls -d "$(HOME)/.cmdstan/cmdstan-"* 2>/dev/null | sort -rV | head -n1; \
  elif [ -d "$(HOME)/cmdstan" ]; then \
    echo "$(HOME)/cmdstan"; \
  fi)
 
# Use the clean path variable
CMDSTAN_PATH = $(CMDSTAN_DIR)

$(info Using paths:)
$(info - HOME: $(HOME))
$(info - R library: $(R_LIB_PATH))
$(info - CmdStan: $(CMDSTAN_PATH))


# Define base directories
STAN_ROOT =   $(CMDSTAN_PATH)/stan
STAN_SRC =    $(CMDSTAN_PATH)/stan/src
STAN_BASE =   $(CMDSTAN_PATH)/stan/src/stan
STAN_LIB =    $(CMDSTAN_PATH)/stan/lib
STAN_MATH =   $(CMDSTAN_PATH)/stan/lib/stan_math
STAN_MATH_LIB = $(CMDSTAN_PATH)/stan/lib/stan_math/lib

$(info directories is: $(directories))
$(info STAN_ROOT is: $(STAN_ROOT))
$(info STAN_SRC is: $(STAN_SRC))
$(info STAN_BASE is: $(STAN_BASE))
$(info STAN_LIB is: $(STAN_LIB))
$(info STAN_MATH is: $(STAN_MATH))
$(info STAN_MATH_LIB is: $(STAN_MATH_LIB))


# Try alternative path finding
CMDSTAN_ALT = $(shell echo "$$CMDSTAN")
$(info CMDSTAN env var is: '$(CMDSTAN_ALT)')

$(info CMDSTAN_PATH found: $(CMDSTAN_PATH))

 
 



 
##### BRIDGESTAN path(s)  --------------------------------
HOME = $(subst \,/,$(USERPROFILE))
BRIDGESTAN = $(shell \
  if [ -d "$(HOME)/.bridgestan/bridgestan-2.5.0" ]; then \
    echo "$(HOME)/.bridgestan/bridgestan-2.5.0"; \
  else \
    ls -d "$(HOME)/.bridgestan/bridgestan-"* 2>/dev/null | grep "bridgestan-[0-9]" | sort -r | head -n1; \
  fi)

ifeq ($(strip $(BRIDGESTAN)),)
BRIDGESTAN = $(shell \
  if [ -d "C:/bridgestan-2.5.0" ]; then \
    echo "C:/bridgestan-2.5.0"; \
  else \
    ls -d "C:/bridgestan-"* 2>/dev/null | grep "bridgestan-[0-9]" | sort -r | head -n1; \
  fi)
endif

ifeq ($(strip $(BRIDGESTAN)),)
  $(warning BridgeStan not found in standard locations. Installation will proceed assuming BridgeStan is in system path.)
endif

BRIDGESTAN_SRC = $(BRIDGESTAN)/src
BRIDGESTAN_STAN_MATH_LIB = $(BRIDGESTAN)/stan/lib/stan_math/lib

  
$(info BRIDGESTAN is: $(BRIDGESTAN))
$(info BRIDGESTAN_SRC is: $(BRIDGESTAN_SRC))
$(info BRIDGESTAN_STAN_MATH_LIB is: $(BRIDGESTAN_STAN_MATH_LIB))


##### TBB path(s)  --------------------------------
## if using cmdstan tbb: 
TBB_PATH=$(STAN_MATH_LIB)/tbb
BRIDGESTAN_TBB_PATH=$(BRIDGESTAN_STAN_MATH_LIB)/tbb

TBB_PATH_2020=$(STAN_MATH_LIB)/tbb_2020.3/include
BRIDGESTAN_TBB_PATH_2020=$(BRIDGESTAN_STAN_MATH_LIB)/tbb_2020.3/include

TBB_DLL=$(TBB_PATH)/tbb.dll
TBB_DLL_BRIDGESTAN=$(BRIDGESTAN_TBB_PATH)/tbb.dll
 
 
$(info TBB_PATH is: $(TBB_PATH))
$(info BRIDGESTAN_TBB_PATH is: $(BRIDGESTAN_TBB_PATH))
$(info TBB_PATH_2020 is: $(TBB_PATH_2020))
$(info BRIDGESTAN_TBB_PATH_2020 is: $(BRIDGESTAN_TBB_PATH_2020))
$(info TBB_DLL is: $(TBB_DLL))
$(info TBB_DLL_BRIDGESTAN is: $(TBB_DLL_BRIDGESTAN))
 
 
# print out paths again for checking and debugging
$(info HOME is: $(HOME))
$(info PKG_PATH is: $(PKG_PATH))
$(info TBB_PATH is: $(TBB_PATH))
$(info BRIDGESTAN is: $(BRIDGESTAN))
$(info CMDSTAN_PATH is: $(CMDSTAN_PATH))
## $(info RTOOLS_PATH is: $(RTOOLS_PATH))

override PKG_CPPFLAGS = $(BASE_FLAGS) \
    -I"$(STAN_MATH_LIB)/eigen_3.4.0" \
    -I"$(STAN_MATH_LIB)/boost_1.84.0" \
    -I"$(STAN_MATH_LIB)/sundials_6.1.1/include" \
    -I"$(STAN_MATH_LIB)/sundials_6.1.1" \
    -I"$(STAN_MATH_LIB)/tbb/include" \
    -I"$(STAN_LIB)/rapidjson_1.1.0" \
    -I"$(STAN_LIB)/rapidjson_1.1.0/rapidjson" \
    -I"$(CMDSTAN_PATH)" \
    -I"$(STAN_ROOT)" \
    -I"$(STAN_SRC)" \
    -I"$(STAN_MATH)" \
    -I"$(STAN_BASE)" \
    -I"$(STAN_LIB)" \
    -I"$(STAN_MATH_LIB)" \
    -I"$(STAN_BASE)/model" \
    -I"$(STAN_BASE)/services" \
    -I"$(STAN_BASE)/io" \
    -I"$(STAN_BASE)/mcmc" \
    -I"$(STAN_BASE)/analyze" \
    -I"$(STAN_BASE)/callbacks" \
    -I"$(STAN_BASE)/lang" \
    -I"$(STAN_BASE)/optimization" \
    -I"$(STAN_BASE)/variational" \
    -I"$(TBB_PATH)/include" \
    -I"$(TBB_PATH)" \
    -I"$(BRIDGESTAN_SRC)"

 
override PKG_CXXFLAGS = $(PKG_CPPFLAGS)
override CPPFLAGS = $(PKG_CPPFLAGS)
override CXXFLAGS = $(PKG_CPPFLAGS)

override CC  =  $(CPP_COMPILER_TYPE) 
override CXX =  $(CXX_COMPILER_TYPE) 

override CFLAGS =  $(CPPFLAGS)
override CC14 = $(CC)
override C14FLAGS = $(CPPFLAGS)
override CC17 = $(CC)
override C17FLAGS = $(CPPFLAGS)
override CC23 =  $(CC)
override C23FLAGS =  $(CPPFLAGS)
override CC90 =  $(CC)
override C90FLAGS = $(CPPFLAGS)
override CC99 =  $(CC)
override 99FLAGS = $(CPPFLAGS)


 
override CXXPICFLAGS = -fpic
override CXX11  =  $(CXX)
override CXX11FLAGS = $(CXXFLAGS)
override CXX11PICFLAGS = -fpic
override CXX14  =   $(CXX)
override CXX14FLAGS = $(CXXFLAGS)
override CXX14PICFLAGS = -fpic
override CXX17  =  $(CXX)
override CXX17FLAGS =  $(CXXFLAGS)
override CXX17PICFLAGS = -fpic
override CXX20  = $(CXX)
override CXX20FLAGS =   $(CXXFLAGS)
override CXX20PICFLAGS = -fpic
override CXX23  =  $(CXX)
override CXX23FLAGS =   $(CXXFLAGS)
override CXX23PICFLAGS = -fpic





# Use C++17
CXX_STD = CXX17 


 

##  ---------------------  Configure package libs 
DUMMY_MODEL_SO = $(PKG_INST_PATH)/dummy_stan_model_win_model.so
$(info DUMMY_MODEL_SO is: $(DUMMY_MODEL_SO))

DUMMY_MODEL_DLL = $(PKG_INST_PATH)/dummy_stan_model_win_model.dll
$(info DUMMY_MODEL_DLL is: $(DUMMY_MODEL_DLL))
 
PKG_LIBS += $(PKG_INST_PATH)/tbb_stan/tbb.dll   # important 
##PKG_LIBS += -L"$(PKG_INST_PATH)" -ltbb # important 
##PKG_LIBS +=  -L"$(BRIDGESTAN_TBB_PATH)"  -ltbb # important 
PKG_LIBS += -L$(TBB_PATH) -ltbb -lpthread
PKG_LIBS += $(DUMMY_MODEL_SO) # load the .so before the .dll (Windows only)
PKG_LIBS += $(DUMMY_MODEL_DLL) # load .dll AFTER loading .so (Windows only)
## PKG_LIBS += $(PKG_INST_PATH)/BayesMVP.dll  




$(SHLIB): $(OBJECTS)
	@cp "$(PKG_INST_PATH)/tbb_stan/tbb.dll" .
	@cp "$(PKG_INST_PATH)/dummy_stan_model_win_model.so" .
	@cp "$(PKG_INST_PATH)/dummy_stan_model_win_model.dll" .
	@cp "$(PKG_INST_PATH)/BayesMVP.dll" .
	@cp "$(R_HOME)/bin/x64/R.dll" .
	$(SHLIB_LINK) -o $@ $(OBJECTS) $(ALL_LIBS) -L. -ltbb -lR ## -lBayesMVP -ldummy_stan_model_win_model
 


