









#####    Compiler settings     ###  ccache
### set compiler types
#CXX_COMPILER_TYPE =       g++
#CPP_COMPILER_TYPE =       gcc
#BASE_FLAGS =  -O3  -march=native  -mtune=native   -D_REENTRANT    -DSTAN_THREADS -pthread  -fPIC
BASE_FLAGS +=  -finline-limit=20000000 ## for g++

CXX_COMPILER_TYPE =       /opt/AMD/aocc-compiler-5.0.0/bin/clang++
CPP_COMPILER_TYPE =       /opt/AMD/aocc-compiler-5.0.0/bin/clang
BASE_FLAGS =  -O3  -march=znver4  -mtune=znver4   -fPIC    -D_REENTRANT  -DSTAN_THREADS -pthread

## BASE_FLAGS +=  -mllvm --openmp-opt-shared-limit=96  ### -inlinehint-threshold=20000000 # for clang++




# Use C++17
CXX_STD = CXX17



BASE_FLAGS +=  -DNDEBUG  -ffp-contract=fast

BASE_FLAGS +=  -mfma -mavx -mavx2
BASE_FLAGS +=       -mfma  -mavx512vl -mavx512dq  -mavx512f


BASE_FLAGS += -fno-math-errno
BASE_FLAGS +=  -fno-signed-zeros
BASE_FLAGS +=  -fno-trapping-math

BASE_FLAGS +=       -DEIGEN_VECTORIZE



## BASE_FLAGS +=  -finline-limit=20000000 ## for g++

PKG_LIBS = -L/usr/lib/gcc/x86_64-linux-gnu/11 -lgomp  ### for g++
PKG_CXXFLAGS += -fopenmp ### for g++
BASE_FLAGS +=  -fopenmp ### for g++



# PKG_CXXFLAGS += -fopenmp -fopenmp-simd ## for AMD AOCC clang++ (and g++?)
# BASE_FLAGS += -fopenmp -fopenmp-simd ## for AMD AOCC clang++ (and g++?)



#######    BayesmMVP and BridgeStan paths

ifeq ($(OS),Windows_NT)
    PKG_PATH = $(shell cd)
else
    PKG_PATH = $(shell pwd)
endif


PKG_LIBS = $(PKG_PATH)/inst/dummy_stan_model_model.so




##  STAN_PATH = $(HOME)/.cmdstan/cmdstan-2.35.0/stan
##  STAN_PATH = $(shell find $(HOME) -maxdepth 3 -type d -path "*/cmdstan*/stan" | head -n 1)

#### Find Stan / cmdstan path (for Linux / MAC OS X)
# First try to find .cmdstan directory and get latest version
CMDSTAN_DOT_PATH = $(shell \
  if [ -d "$(HOME)/.cmdstan" ]; then \
    find "$(HOME)/.cmdstan" -maxdepth 1 -type d -name "cmdstan-*" | \
    sed 's/.*cmdstan-//' | \
    sort -t. -n -r -k1,1 -k2,2 -k3,3 | \
    head -n 1 | \
    xargs -I {} find "$(HOME)/.cmdstan" -maxdepth 1 -type d -name "cmdstan-{}" | \
    head -n 1; \
  fi)

# If .cmdstan not found or empty, look for regular cmdstan
CMDSTAN_REGULAR_PATH = $(shell \
  if [ -z "$(CMDSTAN_DOT_PATH)" ] && [ -d "$(HOME)/cmdstan" ]; then \
    echo "$(HOME)/cmdstan"; \
  fi)

# Combine the results and append /stan
STAN_PATH = $(shell \
  if [ ! -z "$(CMDSTAN_DOT_PATH)" ]; then \
    echo "$(CMDSTAN_DOT_PATH)/stan"; \
  elif [ ! -z "$(CMDSTAN_REGULAR_PATH)" ]; then \
    echo "$(CMDSTAN_REGULAR_PATH)/stan"; \
  fi)



STAN_SRC =  $(STAN_PATH)/src
STAN_MATH =  $(STAN_PATH)/lib/stan_math


TBB_PATH = $(STAN_MATH)/lib/tbb
TBB_SO = $(TBB_PATH)/libtbb.so.2

PKG_LIBS += -Wl,-rpath,$(TBB_PATH)
PKG_LIBS += $(TBB_SO)


# Include paths
PKG_CPPFLAGS=$(BASE_FLAGS)
PKG_CPPFLAGS+=-I$(BRIDGESTAN_SRC)
PKG_CPPFLAGS+=-I$(TBB_PATH)/include

PKG_CPPFLAGS+=-I"$(STAN_PATH)"
PKG_CPPFLAGS+=-I"$(STAN_PATH)/src"
PKG_CPPFLAGS+=-I"$(STAN_PATH)/lib/stan_math/"
PKG_CPPFLAGS+=-I"$(STAN_PATH)/lib/stan_math/lib/boost_1.84.0"
PKG_CPPFLAGS+=-I"$(STAN_PATH)/lib/stan_math/lib/eigen_3.4.0"
PKG_CPPFLAGS+=-I"$(STAN_PATH)/lib/stan_math/lib/sundials_6.1.1/include"

PKG_CPPFLAGS+=-I$(STAN_PATH)
PKG_CPPFLAGS+=-I$(STAN_SRC)
PKG_CPPFLAGS+=-I$(STAN_MATH)
PKG_CPPFLAGS+=-I$(STAN_SRC)/stan/model
PKG_CPPFLAGS+=-I$(STAN_SRC)/stan/services
PKG_CPPFLAGS+=-I$(STAN_SRC)/stan/io
PKG_CPPFLAGS+=-I$(STAN_SRC)/stan/mcmc
PKG_CPPFLAGS+=-I$(STAN_MATH)/lib/eigen_3.4.0 -I$(STAN_MATH)/lib/boost_1.84.0
PKG_CPPFLAGS+=-I$(STAN_MATH)/lib/sundials_6.1.1/include -I$(STAN_MATH)/lib/sundials_6.1.1/src/sundials




BRIDGESTAN_PATH = $(HOME)/bridgestan
BRIDGESTAN_SRC = $(BRIDGESTAN_PATH)/src
PKG_CPPFLAGS+=-I"$(BRIDGESTAN_SRC)"

PKG_CXXFLAGS = $(PKG_CPPFLAGS)  -std=c++17   -DBOOST_DISABLE_ASSERTS

CPPFLAGS += $(PKG_CPPFLAGS)
CXXFLAGS += $(PKG_CXXFLAGS)


CC =  $(CPP_COMPILER_TYPE)
CFLAGS =  $(BASE_FLAGS)
CC14 = $(CPP_COMPILER_TYPE)
C14FLAGS = $(BASE_FLAGS)
CC17 = $(CPP_COMPILER_TYPE)
C17FLAGS = $(BASE_FLAGS)
CC23 =  $(CPP_COMPILER_TYPE)
C23FLAGS =  $(BASE_FLAGS)
CC90 =  $(CPP_COMPILER_TYPE)
C90FLAGS = $(BASE_FLAGS)
CC99 =  $(CPP_COMPILER_TYPE)
99FLAGS = $(BASE_FLAGS)


CXX = $(CXX_COMPILER_TYPE)
CXXFLAGS = $(BASE_FLAGS)
CXXPICFLAGS = -fpic

CXX11 = $(CXX_COMPILER_TYPE)
CXX11FLAGS = $(BASE_FLAGS)
CXX11PICFLAGS = -fpic

CXX14 = $(CXX_COMPILER_TYPE)
CXX14FLAGS = $(BASE_FLAGS)
CXX14PICFLAGS = -fpic

CXX17 = $(CXX_COMPILER_TYPE)
CXX17FLAGS =  $(BASE_FLAGS)
CXX17PICFLAGS = -fpic

CXX20 = $(CXX_COMPILER_TYPE)
CXX20FLAGS =   $(BASE_FLAGS)
CXX20PICFLAGS = -fpic

CXX23 = $(CXX_COMPILER_TYPE)
CXX23FLAGS =   $(BASE_FLAGS)
CXX23PICFLAGS = -fpic







