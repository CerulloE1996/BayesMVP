






#####    Compiler settings     ###  ccache ## znver3 ## znver4 ## znver5 ## native
### set compiler types
# CXX_COMPILER_TYPE =     ccache g++
# CPP_COMPILER_TYPE =     ccache gcc
# BASE_FLAGS =  -O3  -march=native  -mtune=native   -D_REENTRANT    -DSTAN_THREADS -pthread  -fPIC
# BASE_FLAGS +=  -finline-limit=20000000 ## for g++

# PKG_LIBS = -L/usr/lib/gcc/x86_64-linux-gnu/11 -lgomp  ### for g++
# PKG_CXXFLAGS += -fopenmp ### for g++
# BASE_FLAGS +=  -fopenmp ### for g++



CXX_COMPILER_TYPE =    ccache    /opt/AMD/aocc-compiler-5.0.0/bin/clang++
CPP_COMPILER_TYPE =    ccache    /opt/AMD/aocc-compiler-5.0.0/bin/clang
BASE_FLAGS =  -O3  -march=znver4  -mtune=znver4   -fPIC    -D_REENTRANT  -DSTAN_THREADS -pthread
## BASE_FLAGS +=  -liomp5
PKG_LIBS += -L/opt/AMD/aocc-compiler-5.0.0/lib -lomp ## for AMD AOCC clang++
PKG_LIBS += -L/opt/AMD/aocc-compiler-5.0.0/lib -lgomp ## for AMD AOCC clang++
PKG_LIBS += -L/opt/AMD/aocc-compiler-5.0.0/lib -liomp5 ## for AMD AOCC clang++
BASE_FLAGS +=  -fopenmp -fopenmp-simd ## for AMD AOCC clang++
# BASE_FLAGS +=  -mllvm   ### --openmp-opt-shared-limit=96  ### -inlinehint-threshold=20000000 # for clang++


## BASE_FLAGS +=  -mllvm --openmp-opt-shared-limit=96  ### -inlinehint-threshold=20000000 # for clang++


# Use C++17
CXX_STD = CXX17


BASE_FLAGS +=  -fpermissive
BASE_FLAGS +=  -DNDEBUG  -ffp-contract=fast

BASE_FLAGS +=  -mfma -mavx -mavx2
BASE_FLAGS +=    -mfma      -mavx512vl -mavx512dq  -mavx512f



#### BASE_FLAGS +=   -fno-math-errno    -fno-signed-zeros  -fno-trapping-math  ### oordered from safest ( -fno-math-errno ) tto least-safe ( -fno-trapping-math)
BASE_FLAGS += -fno-math-errno
BASE_FLAGS +=  -fno-signed-zeros
BASE_FLAGS +=  -fno-trapping-math

BASE_FLAGS +=       -DEIGEN_VECTORIZE



#######    BayesmMVP and BridgeStan paths
ifeq ($(OS),Windows_NT)
    PKG_PATH = $(shell cd)
    PKG_ROOT = $(shell cd)/..
else
    PKG_PATH = $(shell pwd)
    PKG_ROOT = $(shell pwd)/..
endif




BRIDGESTAN_PATH = $(HOME)/bridgestan
BRIDGESTAN_SRC = $(BRIDGESTAN_PATH)/src





#### Find Stan / cmdstan path (for Linux / MAC OS X)
# First try to find .cmdstan directory and get latest version
CMDSTAN_PATH = $(shell \
  if [ -d "$(HOME)/.cmdstan" ]; then \
    ls -d "$(HOME)/.cmdstan/cmdstan-"* 2>/dev/null | sort -rV | head -n1 | sed 's/\/stan$$//' ; \
  elif [ -d "$(HOME)/cmdstan" ]; then \
    echo "$(HOME)/cmdstan"; \
  fi)

$(info Using CmdStan: $(CMDSTAN_PATH))



# Define base directories
STAN_ROOT =   $(CMDSTAN_PATH)/stan
STAN_SRC =    $(CMDSTAN_PATH)/stan/src
STAN_BASE =   $(CMDSTAN_PATH)/stan/src/stan
STAN_LIB =    $(CMDSTAN_PATH)/stan/lib
STAN_MATH =   $(CMDSTAN_PATH)/stan/lib/stan_math
STAN_MATH_LIB = $(CMDSTAN_PATH)/stan/lib/stan_math/lib
TBB_PATH = $(STAN_MATH)/lib/tbb
TBB_SO = $(TBB_PATH)/libtbb.so.2

PKG_LIBS = -Wl,-rpath,$(TBB_PATH)

# reference the dummy model .so file
PKG_LIBS += $(PKG_ROOT)/inst/dummy_stan_model_model.so -Wl,-rpath,$(TBB_PATH)

# TBB
PKG_LIBS += $(TBB_SO)
PKG_LIBS += $(TBB_PATH)/libtbb.so.2






PKG_CPPFLAGS += -D_REENTRANT -DSTAN_THREADS -DBOOST_DISABLE_ASSERTS \
    -I"$(STAN_MATH_LIB)/eigen_3.4.0" \
    -I"$(STAN_MATH_LIB)/boost_1.84.0" \
    -I"$(STAN_MATH_LIB)/sundials_6.1.1/include" \
    -I"$(STAN_MATH_LIB)/sundials_6.1.1" \
    -I"$(STAN_MATH_LIB)/tbb/include" \
    -I"$(STAN_LIB)/rapidjson_1.1.0" \
    -I"$(STAN_LIB)/rapidjson_1.1.0/rapidjson" \
    -I"$(CMDSTAN_PATH)" \
    -I"$(STAN_ROOT)" \
    -I"$(STAN_SRC)" \
    -I"$(STAN_MATH)" \
    -I"$(STAN_BASE)" \
    -I"$(STAN_LIB)" \
    -I"$(STAN_MATH_LIB)" \
    -I"$(STAN_BASE)/model" \
    -I"$(STAN_BASE)/services" \
    -I"$(STAN_BASE)/io" \
    -I"$(STAN_BASE)/mcmc" \
    -I"$(STAN_BASE)/analyze" \
    -I"$(STAN_BASE)/callbacks" \
    -I"$(STAN_BASE)/lang" \
    -I"$(STAN_BASE)/optimization" \
    -I"$(STAN_BASE)/variational" \
    -I"$(TBB_PATH)/include" \
    -I"$(TBB_PATH)" \
    -I"$(BRIDGESTAN_SRC)"



###     -I"$(R_LIB_PATH)/RcppEigen/include" \
###     -I"$(STAN_MATH_LIB)/eigen_3.4.0" \





PKG_CXXFLAGS = $(PKG_CPPFLAGS)  -std=c++17   -DBOOST_DISABLE_ASSERTS
CPPFLAGS = $(PKG_CPPFLAGS)
CXXFLAGS = $(PKG_CXXFLAGS)






CC =  $(CPP_COMPILER_TYPE)
CFLAGS =  $(BASE_FLAGS)
CC14 = $(CPP_COMPILER_TYPE)
C14FLAGS = $(BASE_FLAGS)
CC17 = $(CPP_COMPILER_TYPE)
C17FLAGS = $(BASE_FLAGS)
CC23 =  $(CPP_COMPILER_TYPE)
C23FLAGS =  $(BASE_FLAGS)
CC90 =  $(CPP_COMPILER_TYPE)
C90FLAGS = $(BASE_FLAGS)
CC99 =  $(CPP_COMPILER_TYPE)
99FLAGS = $(BASE_FLAGS)


CXX = $(CXX_COMPILER_TYPE)
CXXFLAGS = $(BASE_FLAGS)
CXXPICFLAGS = -fpic

CXX11 = $(CXX_COMPILER_TYPE)
CXX11FLAGS = $(BASE_FLAGS)
CXX11PICFLAGS = -fpic

CXX14 = $(CXX_COMPILER_TYPE)
CXX14FLAGS = $(BASE_FLAGS)
CXX14PICFLAGS = -fpic

CXX17 = $(CXX_COMPILER_TYPE)
CXX17FLAGS =  $(BASE_FLAGS)
CXX17PICFLAGS = -fpic

CXX20 = $(CXX_COMPILER_TYPE)
CXX20FLAGS =   $(BASE_FLAGS)
CXX20PICFLAGS = -fpic

CXX23 = $(CXX_COMPILER_TYPE)
CXX23FLAGS =   $(BASE_FLAGS)
CXX23PICFLAGS = -fpic







