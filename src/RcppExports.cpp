// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fn_sign_double
double fn_sign_double(double x);
RcppExport SEXP _BayesMVPv2_fn_sign_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_sign_double(x));
    return rcpp_result_gen;
END_RCPP
}
// fn_sign_log_vec
Eigen::Matrix<double, -1, 1> fn_sign_log_vec(Eigen::Matrix<double, -1, 1  > x);
RcppExport SEXP _BayesMVPv2_fn_sign_log_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_sign_log_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// fn_sign_log_mat
Eigen::Matrix<double, -1, 1> fn_sign_log_mat(Eigen::Matrix<double, -1, 1  > x);
RcppExport SEXP _BayesMVPv2_fn_sign_log_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_sign_log_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// fastpow2_1
double fastpow2_1(float p);
RcppExport SEXP _BayesMVPv2_fastpow2_1(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(fastpow2_1(p));
    return rcpp_result_gen;
END_RCPP
}
// fastpow2_1_double
double fastpow2_1_double(double p);
RcppExport SEXP _BayesMVPv2_fastpow2_1_double(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(fastpow2_1_double(p));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_0_Eigen
Eigen::Array<double, -1, 1  > fast_exp_0_Eigen(Eigen::Array<double, -1, 1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_0_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_0_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_0_Eigen_rowvec
Eigen::Array<double, 1, -1  > fast_exp_0_Eigen_rowvec(Eigen::Array<double, 1, -1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_0_Eigen_rowvec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, 1, -1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_0_Eigen_rowvec(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_log_0_Eigen
Eigen::Array<double, -1, 1  > fast_log_0_Eigen(Eigen::Array<double, -1, 1  > x);
RcppExport SEXP _BayesMVPv2_fast_log_0_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_log_0_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_log_0_Eigen_rowvec
Eigen::Array<double, 1, -1  > fast_log_0_Eigen_rowvec(Eigen::Array<double, 1, -1  > x);
RcppExport SEXP _BayesMVPv2_fast_log_0_Eigen_rowvec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, 1, -1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_log_0_Eigen_rowvec(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_0_Eigen_mat
Eigen::Array<double, -1, -1  > fast_exp_0_Eigen_mat(Eigen::Array<double, -1, -1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_0_Eigen_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, -1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_0_Eigen_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_0_Eigen_mat_RM
Eigen::Matrix<double, -1, -1> fast_exp_0_Eigen_mat_RM(Eigen::Matrix<double, -1, -1> x);
RcppExport SEXP _BayesMVPv2_fast_exp_0_Eigen_mat_RM(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_0_Eigen_mat_RM(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_log_0_Eigen_mat
Eigen::Array<double, -1, -1  > fast_log_0_Eigen_mat(Eigen::Array<double, -1, -1  > x);
RcppExport SEXP _BayesMVPv2_fast_log_0_Eigen_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, -1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_log_0_Eigen_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_log_0_Eigen_mat_RM
Eigen::Array<double, -1, -1 > fast_log_0_Eigen_mat_RM(Eigen::Array<double, -1, -1 > x);
RcppExport SEXP _BayesMVPv2_fast_log_0_Eigen_mat_RM(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, -1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_log_0_Eigen_mat_RM(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_1
double fast_exp_1(float x);
RcppExport SEXP _BayesMVPv2_fast_exp_1(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_1(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_1_double
double fast_exp_1_double(double x);
RcppExport SEXP _BayesMVPv2_fast_exp_1_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_1_double(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_1_Eigen_float
Eigen::Array<double, -1, 1  > fast_exp_1_Eigen_float(Eigen::Array<double, -1, 1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_1_Eigen_float(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_1_Eigen_float(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_1_Eigen_mat_float
Eigen::Array<double, -1, -1  > fast_exp_1_Eigen_mat_float(Eigen::Array<double, -1, -1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_1_Eigen_mat_float(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, -1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_1_Eigen_mat_float(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_1_Eigen
Eigen::Array<double, -1, 1  > fast_exp_1_Eigen(Eigen::Array<double, -1, 1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_1_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_1_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_1_Eigen_colvec
Eigen::Array<double, 1, -1  > fast_exp_1_Eigen_colvec(Eigen::Array<double, 1, -1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_1_Eigen_colvec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, 1, -1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_1_Eigen_colvec(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_1_Eigen_mat
Eigen::Array<double, -1, -1  > fast_exp_1_Eigen_mat(Eigen::Array<double, -1, -1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_1_Eigen_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, -1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_1_Eigen_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_1_Eigen_mat_RM
Eigen::Array<double, -1, -1 > fast_exp_1_Eigen_mat_RM(Eigen::Array<double, -1, -1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_1_Eigen_mat_RM(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, -1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_1_Eigen_mat_RM(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_1_Eigen_v2
Eigen::Array<double, -1, 1  > fast_exp_1_Eigen_v2(Eigen::Array<double, -1, 1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_1_Eigen_v2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_1_Eigen_v2(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_3
double fast_exp_3(float p);
RcppExport SEXP _BayesMVPv2_fast_exp_3(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_3(p));
    return rcpp_result_gen;
END_RCPP
}
// exp_stan
Eigen::Matrix<double, -1, 1> exp_stan(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_exp_stan(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_stan(x));
    return rcpp_result_gen;
END_RCPP
}
// log_stan
Eigen::Matrix<double, -1, 1> log_stan(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_log_stan(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log_stan(x));
    return rcpp_result_gen;
END_RCPP
}
// inv_logit_stan
Eigen::Matrix<double, -1, 1> inv_logit_stan(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_inv_logit_stan(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_logit_stan(x));
    return rcpp_result_gen;
END_RCPP
}
// tanh_stan
Eigen::Matrix<double, -1, 1> tanh_stan(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_tanh_stan(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(tanh_stan(x));
    return rcpp_result_gen;
END_RCPP
}
// erfc_stan
Eigen::Matrix<double, -1, 1> erfc_stan(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_erfc_stan(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(erfc_stan(x));
    return rcpp_result_gen;
END_RCPP
}
// Phi_stan
Eigen::Matrix<double, -1, 1> Phi_stan(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_Phi_stan(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Phi_stan(x));
    return rcpp_result_gen;
END_RCPP
}
// Phi_using_erfc_stan
Eigen::Matrix<double, -1, 1> Phi_using_erfc_stan(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_Phi_using_erfc_stan(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Phi_using_erfc_stan(x));
    return rcpp_result_gen;
END_RCPP
}
// inv_Phi_stan
Eigen::Matrix<double, -1, 1> inv_Phi_stan(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_inv_Phi_stan(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_Phi_stan(x));
    return rcpp_result_gen;
END_RCPP
}
// exp_Eigen
Eigen::Matrix<double, -1, 1> exp_Eigen(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_exp_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// log_Eigen
Eigen::Matrix<double, -1, 1> log_Eigen(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_log_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_mult_mat_by_col_vec
Eigen::Matrix<double, -1, 1 > Rcpp_mult_mat_by_col_vec(Eigen::Matrix<double, -1, -1  > mat, Eigen::Matrix<double, -1, 1 > colvec);
RcppExport SEXP _BayesMVPv2_Rcpp_mult_mat_by_col_vec(SEXP matSEXP, SEXP colvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type colvec(colvecSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_mult_mat_by_col_vec(mat, colvec));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_mult_mat_by_col_vec_float
Eigen::Matrix<float, -1, 1 > Rcpp_mult_mat_by_col_vec_float(Eigen::Matrix<float, -1, -1  > mat, Eigen::Matrix<float, -1, 1 > colvec);
RcppExport SEXP _BayesMVPv2_Rcpp_mult_mat_by_col_vec_float(SEXP matSEXP, SEXP colvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<float, -1, -1  > >::type mat(matSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<float, -1, 1 > >::type colvec(colvecSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_mult_mat_by_col_vec_float(mat, colvec));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_mult_mat_by_mat
Eigen::Matrix<double, -1, -1  > Rcpp_mult_mat_by_mat(Eigen::Matrix<double, -1, -1  > mat_1, Eigen::Matrix<double, -1, -1  > mat_2);
RcppExport SEXP _BayesMVPv2_Rcpp_mult_mat_by_mat(SEXP mat_1SEXP, SEXP mat_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type mat_1(mat_1SEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type mat_2(mat_2SEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_mult_mat_by_mat(mat_1, mat_2));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_det
double Rcpp_det(Eigen::Matrix<double, -1, -1  > mat);
RcppExport SEXP _BayesMVPv2_Rcpp_det(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_det(mat));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_log_det
double Rcpp_log_det(Eigen::Matrix<double, -1, -1  > mat);
RcppExport SEXP _BayesMVPv2_Rcpp_log_det(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_log_det(mat));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_solve
Eigen::Matrix<double, -1, -1  > Rcpp_solve(Eigen::Matrix<double, -1, -1  > mat);
RcppExport SEXP _BayesMVPv2_Rcpp_solve(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_solve(mat));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_Chol
Eigen::Matrix<double, -1, -1  > Rcpp_Chol(Eigen::Matrix<double, -1, -1  > mat);
RcppExport SEXP _BayesMVPv2_Rcpp_Chol(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_Chol(mat));
    return rcpp_result_gen;
END_RCPP
}
// fn_calculate_cutpoints
Eigen::Matrix<double, -1, -1> fn_calculate_cutpoints(Eigen::Matrix<double, -1, 1> log_diffs, double first_cutpoint, int K);
RcppExport SEXP _BayesMVPv2_fn_calculate_cutpoints(SEXP log_diffsSEXP, SEXP first_cutpointSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type log_diffs(log_diffsSEXP);
    Rcpp::traits::input_parameter< double >::type first_cutpoint(first_cutpointSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_calculate_cutpoints(log_diffs, first_cutpoint, K));
    return rcpp_result_gen;
END_RCPP
}
// vec_of_mats_test
std::vector<Eigen::Matrix<double, -1, -1 > > vec_of_mats_test(int n_rows, int n_cols, int n_mats);
RcppExport SEXP _BayesMVPv2_vec_of_mats_test(SEXP n_rowsSEXP, SEXP n_colsSEXP, SEXP n_matsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cols(n_colsSEXP);
    Rcpp::traits::input_parameter< int >::type n_mats(n_matsSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_of_mats_test(n_rows, n_cols, n_mats));
    return rcpp_result_gen;
END_RCPP
}
// vec_of_mats_test_int
std::vector<Eigen::Matrix<int, -1, -1 > > vec_of_mats_test_int(int n_rows, int n_cols, int n_mats);
RcppExport SEXP _BayesMVPv2_vec_of_mats_test_int(SEXP n_rowsSEXP, SEXP n_colsSEXP, SEXP n_matsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cols(n_colsSEXP);
    Rcpp::traits::input_parameter< int >::type n_mats(n_matsSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_of_mats_test_int(n_rows, n_cols, n_mats));
    return rcpp_result_gen;
END_RCPP
}
// vec_of_mats_test_bool
std::vector<Eigen::Matrix<bool, -1, -1 > > vec_of_mats_test_bool(int n_rows, int n_cols, int n_mats);
RcppExport SEXP _BayesMVPv2_vec_of_mats_test_bool(SEXP n_rowsSEXP, SEXP n_colsSEXP, SEXP n_matsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cols(n_colsSEXP);
    Rcpp::traits::input_parameter< int >::type n_mats(n_matsSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_of_mats_test_bool(n_rows, n_cols, n_mats));
    return rcpp_result_gen;
END_RCPP
}
// vec_of_mats_test_int_Ones
std::vector<Eigen::Matrix<int, -1, -1 > > vec_of_mats_test_int_Ones(int n_rows, int n_cols, int n_mats);
RcppExport SEXP _BayesMVPv2_vec_of_mats_test_int_Ones(SEXP n_rowsSEXP, SEXP n_colsSEXP, SEXP n_matsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cols(n_colsSEXP);
    Rcpp::traits::input_parameter< int >::type n_mats(n_matsSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_of_mats_test_int_Ones(n_rows, n_cols, n_mats));
    return rcpp_result_gen;
END_RCPP
}
// vec_of_mats_test_RM
std::vector<Eigen::Matrix<double, -1, -1  , Eigen::RowMajor > > vec_of_mats_test_RM(int n_rows, int n_cols, int n_mats);
RcppExport SEXP _BayesMVPv2_vec_of_mats_test_RM(SEXP n_rowsSEXP, SEXP n_colsSEXP, SEXP n_matsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type n_cols(n_colsSEXP);
    Rcpp::traits::input_parameter< int >::type n_mats(n_matsSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_of_mats_test_RM(n_rows, n_cols, n_mats));
    return rcpp_result_gen;
END_RCPP
}
// fn_convert_3d_array_of_corrs_to_Eigen_vec_RM
Eigen::Matrix<double, -1, 1 > fn_convert_3d_array_of_corrs_to_Eigen_vec_RM(std::vector<Eigen::Matrix<double, -1, -1  > > input_array, int n_rows, int n_arrays);
RcppExport SEXP _BayesMVPv2_fn_convert_3d_array_of_corrs_to_Eigen_vec_RM(SEXP input_arraySEXP, SEXP n_rowsSEXP, SEXP n_arraysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<Eigen::Matrix<double, -1, -1  > > >::type input_array(input_arraySEXP);
    Rcpp::traits::input_parameter< int >::type n_rows(n_rowsSEXP);
    Rcpp::traits::input_parameter< int >::type n_arrays(n_arraysSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_convert_3d_array_of_corrs_to_Eigen_vec_RM(input_array, n_rows, n_arrays));
    return rcpp_result_gen;
END_RCPP
}
// std_vec_to_Eigen_vec
Eigen::Matrix<double, -1, 1> std_vec_to_Eigen_vec(std::vector<double> std_vec);
RcppExport SEXP _BayesMVPv2_std_vec_to_Eigen_vec(SEXP std_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type std_vec(std_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(std_vec_to_Eigen_vec(std_vec));
    return rcpp_result_gen;
END_RCPP
}
// Eigen_vec_to_std_vec
std::vector<double> Eigen_vec_to_std_vec(Eigen::Matrix<double, -1, 1> Eigen_vec);
RcppExport SEXP _BayesMVPv2_Eigen_vec_to_std_vec(SEXP Eigen_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type Eigen_vec(Eigen_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Eigen_vec_to_std_vec(Eigen_vec));
    return rcpp_result_gen;
END_RCPP
}
// fn_convert_unconstrained_to_corrs_double_RM
std::vector<Eigen::Matrix<double, -1, -1, Eigen::RowMajor > > fn_convert_unconstrained_to_corrs_double_RM(Eigen::Matrix<double, -1, -1  > Omega_unconstrained);
RcppExport SEXP _BayesMVPv2_fn_convert_unconstrained_to_corrs_double_RM(SEXP Omega_unconstrainedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type Omega_unconstrained(Omega_unconstrainedSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_convert_unconstrained_to_corrs_double_RM(Omega_unconstrained));
    return rcpp_result_gen;
END_RCPP
}
// phi_sq_sum
double phi_sq_sum(Eigen::Matrix<double, -1, -1> phi);
RcppExport SEXP _BayesMVPv2_phi_sq_sum(SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1> >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(phi_sq_sum(phi));
    return rcpp_result_gen;
END_RCPP
}
// phi_sq_x_M_inv_sum
double phi_sq_x_M_inv_sum(Eigen::Matrix<double, -1, -1> phi, Eigen::Matrix<double, -1, -1> M_inv);
RcppExport SEXP _BayesMVPv2_phi_sq_x_M_inv_sum(SEXP phiSEXP, SEXP M_invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1> >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1> >::type M_inv(M_invSEXP);
    rcpp_result_gen = Rcpp::wrap(phi_sq_x_M_inv_sum(phi, M_inv));
    return rcpp_result_gen;
END_RCPP
}
// fn_log_1m_Phi_double
double fn_log_1m_Phi_double(double x);
RcppExport SEXP _BayesMVPv2_fn_log_1m_Phi_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_log_1m_Phi_double(x));
    return rcpp_result_gen;
END_RCPP
}
// fn_log_Phi_double
double fn_log_Phi_double(double x);
RcppExport SEXP _BayesMVPv2_fn_log_Phi_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_log_Phi_double(x));
    return rcpp_result_gen;
END_RCPP
}
// fn_log_Phi_double_vec
Eigen::Matrix<double, -1, 1> fn_log_Phi_double_vec(Eigen::Matrix<double, -1, 1> x);
RcppExport SEXP _BayesMVPv2_fn_log_Phi_double_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_log_Phi_double_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// commutation_dot
Rcpp::NumericVector commutation_dot(unsigned const n, unsigned const m, Rcpp::NumericVector x, bool const transpose);
RcppExport SEXP _BayesMVPv2_commutation_dot(SEXP nSEXP, SEXP mSEXP, SEXP xSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned const >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned const >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool const >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(commutation_dot(n, m, x, transpose));
    return rcpp_result_gen;
END_RCPP
}
// get_commutation
Eigen::Matrix<double, -1, -1  > get_commutation(unsigned const n, unsigned const m);
RcppExport SEXP _BayesMVPv2_get_commutation(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< unsigned const >::type n(nSEXP);
    Rcpp::traits::input_parameter< unsigned const >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(get_commutation(n, m));
    return rcpp_result_gen;
END_RCPP
}
// elimination_matrix
Eigen::Matrix<double, -1, -1  > elimination_matrix(const int& n);
RcppExport SEXP _BayesMVPv2_elimination_matrix(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(elimination_matrix(n));
    return rcpp_result_gen;
END_RCPP
}
// duplication_matrix
Eigen::Matrix<double, -1, -1  > duplication_matrix(const int& n);
RcppExport SEXP _BayesMVPv2_duplication_matrix(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(duplication_matrix(n));
    return rcpp_result_gen;
END_RCPP
}
// notExp2_double
double notExp2_double(double x);
RcppExport SEXP _BayesMVPv2_notExp2_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(notExp2_double(x));
    return rcpp_result_gen;
END_RCPP
}
// notExp2_vec
Eigen::Matrix<double, -1, 1 > notExp2_vec(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_notExp2_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(notExp2_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// notExp2_deriv_double
double notExp2_deriv_double(double x);
RcppExport SEXP _BayesMVPv2_notExp2_deriv_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(notExp2_deriv_double(x));
    return rcpp_result_gen;
END_RCPP
}
// notExp2_deriv_vec
Eigen::Matrix<double, -1, 1 > notExp2_deriv_vec(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_notExp2_deriv_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(notExp2_deriv_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// notLog2_double
double notLog2_double(double x);
RcppExport SEXP _BayesMVPv2_notLog2_double(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(notLog2_double(x));
    return rcpp_result_gen;
END_RCPP
}
// notLog2_vec
Eigen::Matrix<double, -1, 1 > notLog2_vec(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_notLog2_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(notLog2_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_double_wo_checks_Eigen
Eigen::Array<double, -1, 1  > fast_exp_double_wo_checks_Eigen(Eigen::Array<double, -1, 1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_double_wo_checks_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_double_wo_checks_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_double_wo_checks_Eigen_mat
Eigen::Array<double, -1, -1  > fast_exp_double_wo_checks_Eigen_mat(Eigen::Array<double, -1, -1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_double_wo_checks_Eigen_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, -1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_double_wo_checks_Eigen_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_approx_double_wo_checks
double fast_exp_approx_double_wo_checks(double p);
RcppExport SEXP _BayesMVPv2_fast_exp_approx_double_wo_checks(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_approx_double_wo_checks(p));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_approx_double_wo_checks_Eigen
Eigen::Array<double, -1, 1  > fast_exp_approx_double_wo_checks_Eigen(Eigen::Array<double, -1, 1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_approx_double_wo_checks_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_approx_double_wo_checks_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_exp_approx_double_wo_checks_Eigen_mat
Eigen::Array<double, -1, -1  > fast_exp_approx_double_wo_checks_Eigen_mat(Eigen::Array<double, -1, -1  > x);
RcppExport SEXP _BayesMVPv2_fast_exp_approx_double_wo_checks_Eigen_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, -1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_exp_approx_double_wo_checks_Eigen_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_log_approx_double_wo_checks_Eigen
Eigen::Array<double, -1, 1  > fast_log_approx_double_wo_checks_Eigen(Eigen::Array<double, -1, 1  > x);
RcppExport SEXP _BayesMVPv2_fast_log_approx_double_wo_checks_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_log_approx_double_wo_checks_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_log_approx_double_wo_checks_Eigen_mat
Eigen::Array<double, -1, -1  > fast_log_approx_double_wo_checks_Eigen_mat(Eigen::Array<double, -1, -1  > x);
RcppExport SEXP _BayesMVPv2_fast_log_approx_double_wo_checks_Eigen_mat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, -1  > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_log_approx_double_wo_checks_Eigen_mat(x));
    return rcpp_result_gen;
END_RCPP
}
// fn_ld_exp_bitshift_1
double fn_ld_exp_bitshift_1(int b);
RcppExport SEXP _BayesMVPv2_fn_ld_exp_bitshift_1(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_ld_exp_bitshift_1(b));
    return rcpp_result_gen;
END_RCPP
}
// fn_ld_exp_bitshift_2
double fn_ld_exp_bitshift_2(double a, int b);
RcppExport SEXP _BayesMVPv2_fn_ld_exp_bitshift_2(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_ld_exp_bitshift_2(a, b));
    return rcpp_result_gen;
END_RCPP
}
// fast_tanh_approx_Eigen
Eigen::Matrix<double, -1, 1> fast_tanh_approx_Eigen(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_fast_tanh_approx_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_tanh_approx_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// Phi_using_erfc_Eigen
Eigen::Matrix<double, -1, 1> Phi_using_erfc_Eigen(Eigen::Matrix<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_Phi_using_erfc_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Phi_using_erfc_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// inv_logit_1_Eigen
Eigen::Array<double, -1, 1> inv_logit_1_Eigen(Eigen::Array<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_inv_logit_1_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_logit_1_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_inv_logit_1_Eigen
Eigen::Array<double, -1, 1> fast_inv_logit_1_Eigen(Eigen::Array<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_fast_inv_logit_1_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_inv_logit_1_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// Phi_approx_Eigen
Eigen::Array<double, -1, 1> Phi_approx_Eigen(Eigen::Array<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_Phi_approx_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Phi_approx_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// fast_Phi_approx_1_Eigen
Eigen::Array<double, -1, 1> fast_Phi_approx_1_Eigen(Eigen::Array<double, -1, 1 > x);
RcppExport SEXP _BayesMVPv2_fast_Phi_approx_1_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1 > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_Phi_approx_1_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// qnorm_rcpp_Eigen
Eigen::Matrix<double, -1, 1> qnorm_rcpp_Eigen(Eigen::Matrix<double, -1, 1> p);
RcppExport SEXP _BayesMVPv2_qnorm_rcpp_Eigen(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(qnorm_rcpp_Eigen(p));
    return rcpp_result_gen;
END_RCPP
}
// qnorm_w_fast_log_rcpp_Eigen
Eigen::Matrix<double, -1, 1> qnorm_w_fast_log_rcpp_Eigen(Eigen::Matrix<double, -1, 1> p);
RcppExport SEXP _BayesMVPv2_qnorm_w_fast_log_rcpp_Eigen(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(qnorm_w_fast_log_rcpp_Eigen(p));
    return rcpp_result_gen;
END_RCPP
}
// Phi_approx_fast_Eigen
Eigen::Array<double, -1, 1  > Phi_approx_fast_Eigen(Eigen::Array<double, -1, 1   > x);
RcppExport SEXP _BayesMVPv2_Phi_approx_fast_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1   > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Phi_approx_fast_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// inv_Phi_approx_fast_Eigen
Eigen::Array<double, -1, 1  > inv_Phi_approx_fast_Eigen(Eigen::Array<double, -1, 1   > x);
RcppExport SEXP _BayesMVPv2_inv_Phi_approx_fast_Eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1   > >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_Phi_approx_fast_Eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// fn_lp_and_grad_latent_trait_MD_and_AD
Eigen::Matrix<double, -1, 1 > fn_lp_and_grad_latent_trait_MD_and_AD(Eigen::Matrix<double, -1, 1  > theta_main, Eigen::Matrix<double, -1, 1  > theta_us, Eigen::Matrix< int, -1, -1> y, std::vector<Eigen::Matrix<double, -1, -1 > > X, Rcpp::List other_args);
RcppExport SEXP _BayesMVPv2_fn_lp_and_grad_latent_trait_MD_and_AD(SEXP theta_mainSEXP, SEXP theta_usSEXP, SEXP ySEXP, SEXP XSEXP, SEXP other_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1  > >::type theta_main(theta_mainSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1  > >::type theta_us(theta_usSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix< int, -1, -1> >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::Matrix<double, -1, -1 > > >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type other_args(other_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_lp_and_grad_latent_trait_MD_and_AD(theta_main, theta_us, y, X, other_args));
    return rcpp_result_gen;
END_RCPP
}
// fn_lp_and_grad_MVP_using_Chol_Spinkney_MD_and_AD
Eigen::Matrix<double, -1, 1 > fn_lp_and_grad_MVP_using_Chol_Spinkney_MD_and_AD(Eigen::Matrix<double, -1, 1  > theta_main, Eigen::Matrix<double, -1, 1  > theta_us, Eigen::Matrix<int, -1, -1> y, std::vector<Eigen::Matrix<double, -1, -1 > > X, Rcpp::List other_args);
RcppExport SEXP _BayesMVPv2_fn_lp_and_grad_MVP_using_Chol_Spinkney_MD_and_AD(SEXP theta_mainSEXP, SEXP theta_usSEXP, SEXP ySEXP, SEXP XSEXP, SEXP other_argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1  > >::type theta_main(theta_mainSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1  > >::type theta_us(theta_usSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<int, -1, -1> >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::Matrix<double, -1, -1 > > >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type other_args(other_argsSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_lp_and_grad_MVP_using_Chol_Spinkney_MD_and_AD(theta_main, theta_us, y, X, other_args));
    return rcpp_result_gen;
END_RCPP
}
// fn_mult_scalar_x_vec_using_log_sign_arrays_double
Eigen::Matrix<double, -1, 1> fn_mult_scalar_x_vec_using_log_sign_arrays_double(double x, Eigen::Matrix<double, -1, 1  > y);
RcppExport SEXP _BayesMVPv2_fn_mult_scalar_x_vec_using_log_sign_arrays_double(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1  > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fn_mult_scalar_x_vec_using_log_sign_arrays_double(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fn_mult_vec_x_vec_using_log_sign_arrays_double
Eigen::Matrix<double, -1, 1> fn_mult_vec_x_vec_using_log_sign_arrays_double(Eigen::Matrix<double, -1, 1  > x, Eigen::Matrix<double, -1, 1  > y);
RcppExport SEXP _BayesMVPv2_fn_mult_vec_x_vec_using_log_sign_arrays_double(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1  > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1  > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fn_mult_vec_x_vec_using_log_sign_arrays_double(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fn_mult_mat_x_mat_using_log_sign_arrays_double
Eigen::Matrix<double, -1, -1> fn_mult_mat_x_mat_using_log_sign_arrays_double(Eigen::Matrix<double, -1, -1  > x, Eigen::Matrix<double, -1, -1  > y);
RcppExport SEXP _BayesMVPv2_fn_mult_mat_x_mat_using_log_sign_arrays_double(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fn_mult_mat_x_mat_using_log_sign_arrays_double(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fn_log_abs_sum_exp_vectorised_double
Eigen::Matrix<double, -1, -1> fn_log_abs_sum_exp_vectorised_double(Eigen::Array<double, -1, 1  > x_signs, Eigen::Array<double, -1, 1  > y_signs, Eigen::Array<double, -1, 1  > log_x, Eigen::Array<double, -1, 1  > log_y);
RcppExport SEXP _BayesMVPv2_fn_log_abs_sum_exp_vectorised_double(SEXP x_signsSEXP, SEXP y_signsSEXP, SEXP log_xSEXP, SEXP log_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type x_signs(x_signsSEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type y_signs(y_signsSEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type log_x(log_xSEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type log_y(log_ySEXP);
    rcpp_result_gen = Rcpp::wrap(fn_log_abs_sum_exp_vectorised_double(x_signs, y_signs, log_x, log_y));
    return rcpp_result_gen;
END_RCPP
}
// fn_log_abs_sum_exp_mult_mat_by_col_vec_double
Eigen::Matrix<double, -1, -1> fn_log_abs_sum_exp_mult_mat_by_col_vec_double(Eigen::Array<double, -1, -1  > signs_A_mat, Eigen::Array<double, -1, 1   > signs_b_vec, Eigen::Array<double, -1, -1  > log_abs_A_mat, Eigen::Array<double, -1, 1   > log_abs_b_vec);
RcppExport SEXP _BayesMVPv2_fn_log_abs_sum_exp_mult_mat_by_col_vec_double(SEXP signs_A_matSEXP, SEXP signs_b_vecSEXP, SEXP log_abs_A_matSEXP, SEXP log_abs_b_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, -1  > >::type signs_A_mat(signs_A_matSEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1   > >::type signs_b_vec(signs_b_vecSEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, -1  > >::type log_abs_A_mat(log_abs_A_matSEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1   > >::type log_abs_b_vec(log_abs_b_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fn_log_abs_sum_exp_mult_mat_by_col_vec_double(signs_A_mat, signs_b_vec, log_abs_A_mat, log_abs_b_vec));
    return rcpp_result_gen;
END_RCPP
}
// draw_mean_zero_norm_Rcpp
Eigen::Matrix<double, -1, 1> draw_mean_zero_norm_Rcpp(Eigen::Matrix<double, -1, 1> draws_vec, Eigen::Matrix<double, -1, 1> SD_vec);
RcppExport SEXP _BayesMVPv2_draw_mean_zero_norm_Rcpp(SEXP draws_vecSEXP, SEXP SD_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type draws_vec(draws_vecSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type SD_vec(SD_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_mean_zero_norm_Rcpp(draws_vec, SD_vec));
    return rcpp_result_gen;
END_RCPP
}
// draw_mean_zero_norm_using_Zigg_Rcpp
Eigen::Matrix<double, -1, 1> draw_mean_zero_norm_using_Zigg_Rcpp(Eigen::Matrix<double, -1, 1> draws_vec, Eigen::Matrix<double, -1, 1> SD_vec);
RcppExport SEXP _BayesMVPv2_draw_mean_zero_norm_using_Zigg_Rcpp(SEXP draws_vecSEXP, SEXP SD_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type draws_vec(draws_vecSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, 1> >::type SD_vec(SD_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_mean_zero_norm_using_Zigg_Rcpp(draws_vec, SD_vec));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_fn_sampling_single_iter_burnin
Eigen::Matrix<double, -1, -1> Rcpp_fn_sampling_single_iter_burnin(std::string Model_type, Eigen::Array<double, -1, 1 > theta_main_array, Eigen::Array<double, -1, 1 > theta_us_array, Eigen::Matrix<int, -1, -1> y, std::vector<Eigen::Matrix<double, -1, -1 > > X, Rcpp::List other_args, int L, double eps, double log_posterior, Eigen::Array<double, -1, 1  > M_inv_us_array, Eigen::Matrix<double, -1, -1  > M_dense_main, Eigen::Matrix<double, -1, -1  > M_inv_dense_main, Eigen::Matrix<double, -1, -1  > M_inv_dense_main_chol);
RcppExport SEXP _BayesMVPv2_Rcpp_fn_sampling_single_iter_burnin(SEXP Model_typeSEXP, SEXP theta_main_arraySEXP, SEXP theta_us_arraySEXP, SEXP ySEXP, SEXP XSEXP, SEXP other_argsSEXP, SEXP LSEXP, SEXP epsSEXP, SEXP log_posteriorSEXP, SEXP M_inv_us_arraySEXP, SEXP M_dense_mainSEXP, SEXP M_inv_dense_mainSEXP, SEXP M_inv_dense_main_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type Model_type(Model_typeSEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1 > >::type theta_main_array(theta_main_arraySEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1 > >::type theta_us_array(theta_us_arraySEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<int, -1, -1> >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::Matrix<double, -1, -1 > > >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type other_args(other_argsSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type log_posterior(log_posteriorSEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type M_inv_us_array(M_inv_us_arraySEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type M_dense_main(M_dense_mainSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type M_inv_dense_main(M_inv_dense_mainSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type M_inv_dense_main_chol(M_inv_dense_main_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_fn_sampling_single_iter_burnin(Model_type, theta_main_array, theta_us_array, y, X, other_args, L, eps, log_posterior, M_inv_us_array, M_dense_main, M_inv_dense_main, M_inv_dense_main_chol));
    return rcpp_result_gen;
END_RCPP
}
// Rcpp_fn_post_burnin_HMC_post_adaptation_phase_float_big_version
Rcpp::List Rcpp_fn_post_burnin_HMC_post_adaptation_phase_float_big_version(std::string Model_type, Eigen::Array<double, -1, 1 > theta_main_array, Eigen::Array<double, -1, 1 > theta_us_array, Eigen::Matrix<int, -1, -1> y, std::vector<Eigen::Matrix<double, -1, -1 > > X, Rcpp::List other_args, const bool tau_jittered, const int n_iter, const int n_chain_for_loading_bar, double tau, const double eps, double log_posterior, Eigen::Array<double, -1, 1  > M_inv_us_array, Eigen::Matrix<double, -1, -1  > M_dense_main, Eigen::Matrix<double, -1, -1  > M_inv_dense_main, Eigen::Matrix<double, -1, -1  > M_inv_dense_main_chol);
RcppExport SEXP _BayesMVPv2_Rcpp_fn_post_burnin_HMC_post_adaptation_phase_float_big_version(SEXP Model_typeSEXP, SEXP theta_main_arraySEXP, SEXP theta_us_arraySEXP, SEXP ySEXP, SEXP XSEXP, SEXP other_argsSEXP, SEXP tau_jitteredSEXP, SEXP n_iterSEXP, SEXP n_chain_for_loading_barSEXP, SEXP tauSEXP, SEXP epsSEXP, SEXP log_posteriorSEXP, SEXP M_inv_us_arraySEXP, SEXP M_dense_mainSEXP, SEXP M_inv_dense_mainSEXP, SEXP M_inv_dense_main_cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type Model_type(Model_typeSEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1 > >::type theta_main_array(theta_main_arraySEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1 > >::type theta_us_array(theta_us_arraySEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<int, -1, -1> >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<Eigen::Matrix<double, -1, -1 > > >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type other_args(other_argsSEXP);
    Rcpp::traits::input_parameter< const bool >::type tau_jittered(tau_jitteredSEXP);
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type n_chain_for_loading_bar(n_chain_for_loading_barSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type log_posterior(log_posteriorSEXP);
    Rcpp::traits::input_parameter< Eigen::Array<double, -1, 1  > >::type M_inv_us_array(M_inv_us_arraySEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type M_dense_main(M_dense_mainSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type M_inv_dense_main(M_inv_dense_mainSEXP);
    Rcpp::traits::input_parameter< Eigen::Matrix<double, -1, -1  > >::type M_inv_dense_main_chol(M_inv_dense_main_cholSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_fn_post_burnin_HMC_post_adaptation_phase_float_big_version(Model_type, theta_main_array, theta_us_array, y, X, other_args, tau_jittered, n_iter, n_chain_for_loading_bar, tau, eps, log_posterior, M_inv_us_array, M_dense_main, M_inv_dense_main, M_inv_dense_main_chol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesMVPv2_fn_sign_double", (DL_FUNC) &_BayesMVPv2_fn_sign_double, 1},
    {"_BayesMVPv2_fn_sign_log_vec", (DL_FUNC) &_BayesMVPv2_fn_sign_log_vec, 1},
    {"_BayesMVPv2_fn_sign_log_mat", (DL_FUNC) &_BayesMVPv2_fn_sign_log_mat, 1},
    {"_BayesMVPv2_fastpow2_1", (DL_FUNC) &_BayesMVPv2_fastpow2_1, 1},
    {"_BayesMVPv2_fastpow2_1_double", (DL_FUNC) &_BayesMVPv2_fastpow2_1_double, 1},
    {"_BayesMVPv2_fast_exp_0_Eigen", (DL_FUNC) &_BayesMVPv2_fast_exp_0_Eigen, 1},
    {"_BayesMVPv2_fast_exp_0_Eigen_rowvec", (DL_FUNC) &_BayesMVPv2_fast_exp_0_Eigen_rowvec, 1},
    {"_BayesMVPv2_fast_log_0_Eigen", (DL_FUNC) &_BayesMVPv2_fast_log_0_Eigen, 1},
    {"_BayesMVPv2_fast_log_0_Eigen_rowvec", (DL_FUNC) &_BayesMVPv2_fast_log_0_Eigen_rowvec, 1},
    {"_BayesMVPv2_fast_exp_0_Eigen_mat", (DL_FUNC) &_BayesMVPv2_fast_exp_0_Eigen_mat, 1},
    {"_BayesMVPv2_fast_exp_0_Eigen_mat_RM", (DL_FUNC) &_BayesMVPv2_fast_exp_0_Eigen_mat_RM, 1},
    {"_BayesMVPv2_fast_log_0_Eigen_mat", (DL_FUNC) &_BayesMVPv2_fast_log_0_Eigen_mat, 1},
    {"_BayesMVPv2_fast_log_0_Eigen_mat_RM", (DL_FUNC) &_BayesMVPv2_fast_log_0_Eigen_mat_RM, 1},
    {"_BayesMVPv2_fast_exp_1", (DL_FUNC) &_BayesMVPv2_fast_exp_1, 1},
    {"_BayesMVPv2_fast_exp_1_double", (DL_FUNC) &_BayesMVPv2_fast_exp_1_double, 1},
    {"_BayesMVPv2_fast_exp_1_Eigen_float", (DL_FUNC) &_BayesMVPv2_fast_exp_1_Eigen_float, 1},
    {"_BayesMVPv2_fast_exp_1_Eigen_mat_float", (DL_FUNC) &_BayesMVPv2_fast_exp_1_Eigen_mat_float, 1},
    {"_BayesMVPv2_fast_exp_1_Eigen", (DL_FUNC) &_BayesMVPv2_fast_exp_1_Eigen, 1},
    {"_BayesMVPv2_fast_exp_1_Eigen_colvec", (DL_FUNC) &_BayesMVPv2_fast_exp_1_Eigen_colvec, 1},
    {"_BayesMVPv2_fast_exp_1_Eigen_mat", (DL_FUNC) &_BayesMVPv2_fast_exp_1_Eigen_mat, 1},
    {"_BayesMVPv2_fast_exp_1_Eigen_mat_RM", (DL_FUNC) &_BayesMVPv2_fast_exp_1_Eigen_mat_RM, 1},
    {"_BayesMVPv2_fast_exp_1_Eigen_v2", (DL_FUNC) &_BayesMVPv2_fast_exp_1_Eigen_v2, 1},
    {"_BayesMVPv2_fast_exp_3", (DL_FUNC) &_BayesMVPv2_fast_exp_3, 1},
    {"_BayesMVPv2_exp_stan", (DL_FUNC) &_BayesMVPv2_exp_stan, 1},
    {"_BayesMVPv2_log_stan", (DL_FUNC) &_BayesMVPv2_log_stan, 1},
    {"_BayesMVPv2_inv_logit_stan", (DL_FUNC) &_BayesMVPv2_inv_logit_stan, 1},
    {"_BayesMVPv2_tanh_stan", (DL_FUNC) &_BayesMVPv2_tanh_stan, 1},
    {"_BayesMVPv2_erfc_stan", (DL_FUNC) &_BayesMVPv2_erfc_stan, 1},
    {"_BayesMVPv2_Phi_stan", (DL_FUNC) &_BayesMVPv2_Phi_stan, 1},
    {"_BayesMVPv2_Phi_using_erfc_stan", (DL_FUNC) &_BayesMVPv2_Phi_using_erfc_stan, 1},
    {"_BayesMVPv2_inv_Phi_stan", (DL_FUNC) &_BayesMVPv2_inv_Phi_stan, 1},
    {"_BayesMVPv2_exp_Eigen", (DL_FUNC) &_BayesMVPv2_exp_Eigen, 1},
    {"_BayesMVPv2_log_Eigen", (DL_FUNC) &_BayesMVPv2_log_Eigen, 1},
    {"_BayesMVPv2_Rcpp_mult_mat_by_col_vec", (DL_FUNC) &_BayesMVPv2_Rcpp_mult_mat_by_col_vec, 2},
    {"_BayesMVPv2_Rcpp_mult_mat_by_col_vec_float", (DL_FUNC) &_BayesMVPv2_Rcpp_mult_mat_by_col_vec_float, 2},
    {"_BayesMVPv2_Rcpp_mult_mat_by_mat", (DL_FUNC) &_BayesMVPv2_Rcpp_mult_mat_by_mat, 2},
    {"_BayesMVPv2_Rcpp_det", (DL_FUNC) &_BayesMVPv2_Rcpp_det, 1},
    {"_BayesMVPv2_Rcpp_log_det", (DL_FUNC) &_BayesMVPv2_Rcpp_log_det, 1},
    {"_BayesMVPv2_Rcpp_solve", (DL_FUNC) &_BayesMVPv2_Rcpp_solve, 1},
    {"_BayesMVPv2_Rcpp_Chol", (DL_FUNC) &_BayesMVPv2_Rcpp_Chol, 1},
    {"_BayesMVPv2_fn_calculate_cutpoints", (DL_FUNC) &_BayesMVPv2_fn_calculate_cutpoints, 3},
    {"_BayesMVPv2_vec_of_mats_test", (DL_FUNC) &_BayesMVPv2_vec_of_mats_test, 3},
    {"_BayesMVPv2_vec_of_mats_test_int", (DL_FUNC) &_BayesMVPv2_vec_of_mats_test_int, 3},
    {"_BayesMVPv2_vec_of_mats_test_bool", (DL_FUNC) &_BayesMVPv2_vec_of_mats_test_bool, 3},
    {"_BayesMVPv2_vec_of_mats_test_int_Ones", (DL_FUNC) &_BayesMVPv2_vec_of_mats_test_int_Ones, 3},
    {"_BayesMVPv2_vec_of_mats_test_RM", (DL_FUNC) &_BayesMVPv2_vec_of_mats_test_RM, 3},
    {"_BayesMVPv2_fn_convert_3d_array_of_corrs_to_Eigen_vec_RM", (DL_FUNC) &_BayesMVPv2_fn_convert_3d_array_of_corrs_to_Eigen_vec_RM, 3},
    {"_BayesMVPv2_std_vec_to_Eigen_vec", (DL_FUNC) &_BayesMVPv2_std_vec_to_Eigen_vec, 1},
    {"_BayesMVPv2_Eigen_vec_to_std_vec", (DL_FUNC) &_BayesMVPv2_Eigen_vec_to_std_vec, 1},
    {"_BayesMVPv2_fn_convert_unconstrained_to_corrs_double_RM", (DL_FUNC) &_BayesMVPv2_fn_convert_unconstrained_to_corrs_double_RM, 1},
    {"_BayesMVPv2_phi_sq_sum", (DL_FUNC) &_BayesMVPv2_phi_sq_sum, 1},
    {"_BayesMVPv2_phi_sq_x_M_inv_sum", (DL_FUNC) &_BayesMVPv2_phi_sq_x_M_inv_sum, 2},
    {"_BayesMVPv2_fn_log_1m_Phi_double", (DL_FUNC) &_BayesMVPv2_fn_log_1m_Phi_double, 1},
    {"_BayesMVPv2_fn_log_Phi_double", (DL_FUNC) &_BayesMVPv2_fn_log_Phi_double, 1},
    {"_BayesMVPv2_fn_log_Phi_double_vec", (DL_FUNC) &_BayesMVPv2_fn_log_Phi_double_vec, 1},
    {"_BayesMVPv2_commutation_dot", (DL_FUNC) &_BayesMVPv2_commutation_dot, 4},
    {"_BayesMVPv2_get_commutation", (DL_FUNC) &_BayesMVPv2_get_commutation, 2},
    {"_BayesMVPv2_elimination_matrix", (DL_FUNC) &_BayesMVPv2_elimination_matrix, 1},
    {"_BayesMVPv2_duplication_matrix", (DL_FUNC) &_BayesMVPv2_duplication_matrix, 1},
    {"_BayesMVPv2_notExp2_double", (DL_FUNC) &_BayesMVPv2_notExp2_double, 1},
    {"_BayesMVPv2_notExp2_vec", (DL_FUNC) &_BayesMVPv2_notExp2_vec, 1},
    {"_BayesMVPv2_notExp2_deriv_double", (DL_FUNC) &_BayesMVPv2_notExp2_deriv_double, 1},
    {"_BayesMVPv2_notExp2_deriv_vec", (DL_FUNC) &_BayesMVPv2_notExp2_deriv_vec, 1},
    {"_BayesMVPv2_notLog2_double", (DL_FUNC) &_BayesMVPv2_notLog2_double, 1},
    {"_BayesMVPv2_notLog2_vec", (DL_FUNC) &_BayesMVPv2_notLog2_vec, 1},
    {"_BayesMVPv2_fast_exp_double_wo_checks_Eigen", (DL_FUNC) &_BayesMVPv2_fast_exp_double_wo_checks_Eigen, 1},
    {"_BayesMVPv2_fast_exp_double_wo_checks_Eigen_mat", (DL_FUNC) &_BayesMVPv2_fast_exp_double_wo_checks_Eigen_mat, 1},
    {"_BayesMVPv2_fast_exp_approx_double_wo_checks", (DL_FUNC) &_BayesMVPv2_fast_exp_approx_double_wo_checks, 1},
    {"_BayesMVPv2_fast_exp_approx_double_wo_checks_Eigen", (DL_FUNC) &_BayesMVPv2_fast_exp_approx_double_wo_checks_Eigen, 1},
    {"_BayesMVPv2_fast_exp_approx_double_wo_checks_Eigen_mat", (DL_FUNC) &_BayesMVPv2_fast_exp_approx_double_wo_checks_Eigen_mat, 1},
    {"_BayesMVPv2_fast_log_approx_double_wo_checks_Eigen", (DL_FUNC) &_BayesMVPv2_fast_log_approx_double_wo_checks_Eigen, 1},
    {"_BayesMVPv2_fast_log_approx_double_wo_checks_Eigen_mat", (DL_FUNC) &_BayesMVPv2_fast_log_approx_double_wo_checks_Eigen_mat, 1},
    {"_BayesMVPv2_fn_ld_exp_bitshift_1", (DL_FUNC) &_BayesMVPv2_fn_ld_exp_bitshift_1, 1},
    {"_BayesMVPv2_fn_ld_exp_bitshift_2", (DL_FUNC) &_BayesMVPv2_fn_ld_exp_bitshift_2, 2},
    {"_BayesMVPv2_fast_tanh_approx_Eigen", (DL_FUNC) &_BayesMVPv2_fast_tanh_approx_Eigen, 1},
    {"_BayesMVPv2_Phi_using_erfc_Eigen", (DL_FUNC) &_BayesMVPv2_Phi_using_erfc_Eigen, 1},
    {"_BayesMVPv2_inv_logit_1_Eigen", (DL_FUNC) &_BayesMVPv2_inv_logit_1_Eigen, 1},
    {"_BayesMVPv2_fast_inv_logit_1_Eigen", (DL_FUNC) &_BayesMVPv2_fast_inv_logit_1_Eigen, 1},
    {"_BayesMVPv2_Phi_approx_Eigen", (DL_FUNC) &_BayesMVPv2_Phi_approx_Eigen, 1},
    {"_BayesMVPv2_fast_Phi_approx_1_Eigen", (DL_FUNC) &_BayesMVPv2_fast_Phi_approx_1_Eigen, 1},
    {"_BayesMVPv2_qnorm_rcpp_Eigen", (DL_FUNC) &_BayesMVPv2_qnorm_rcpp_Eigen, 1},
    {"_BayesMVPv2_qnorm_w_fast_log_rcpp_Eigen", (DL_FUNC) &_BayesMVPv2_qnorm_w_fast_log_rcpp_Eigen, 1},
    {"_BayesMVPv2_Phi_approx_fast_Eigen", (DL_FUNC) &_BayesMVPv2_Phi_approx_fast_Eigen, 1},
    {"_BayesMVPv2_inv_Phi_approx_fast_Eigen", (DL_FUNC) &_BayesMVPv2_inv_Phi_approx_fast_Eigen, 1},
    {"_BayesMVPv2_fn_lp_and_grad_latent_trait_MD_and_AD", (DL_FUNC) &_BayesMVPv2_fn_lp_and_grad_latent_trait_MD_and_AD, 5},
    {"_BayesMVPv2_fn_lp_and_grad_MVP_using_Chol_Spinkney_MD_and_AD", (DL_FUNC) &_BayesMVPv2_fn_lp_and_grad_MVP_using_Chol_Spinkney_MD_and_AD, 5},
    {"_BayesMVPv2_fn_mult_scalar_x_vec_using_log_sign_arrays_double", (DL_FUNC) &_BayesMVPv2_fn_mult_scalar_x_vec_using_log_sign_arrays_double, 2},
    {"_BayesMVPv2_fn_mult_vec_x_vec_using_log_sign_arrays_double", (DL_FUNC) &_BayesMVPv2_fn_mult_vec_x_vec_using_log_sign_arrays_double, 2},
    {"_BayesMVPv2_fn_mult_mat_x_mat_using_log_sign_arrays_double", (DL_FUNC) &_BayesMVPv2_fn_mult_mat_x_mat_using_log_sign_arrays_double, 2},
    {"_BayesMVPv2_fn_log_abs_sum_exp_vectorised_double", (DL_FUNC) &_BayesMVPv2_fn_log_abs_sum_exp_vectorised_double, 4},
    {"_BayesMVPv2_fn_log_abs_sum_exp_mult_mat_by_col_vec_double", (DL_FUNC) &_BayesMVPv2_fn_log_abs_sum_exp_mult_mat_by_col_vec_double, 4},
    {"_BayesMVPv2_draw_mean_zero_norm_Rcpp", (DL_FUNC) &_BayesMVPv2_draw_mean_zero_norm_Rcpp, 2},
    {"_BayesMVPv2_draw_mean_zero_norm_using_Zigg_Rcpp", (DL_FUNC) &_BayesMVPv2_draw_mean_zero_norm_using_Zigg_Rcpp, 2},
    {"_BayesMVPv2_Rcpp_fn_sampling_single_iter_burnin", (DL_FUNC) &_BayesMVPv2_Rcpp_fn_sampling_single_iter_burnin, 13},
    {"_BayesMVPv2_Rcpp_fn_post_burnin_HMC_post_adaptation_phase_float_big_version", (DL_FUNC) &_BayesMVPv2_Rcpp_fn_post_burnin_HMC_post_adaptation_phase_float_big_version, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesMVPv2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
