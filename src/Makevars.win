

#####    Compiler settings     ###  ccache
### set compiler types

CXX_COMPILER_TYPE =      C:/rtools44/x86_64-w64-mingw32.static.posix/bin/g++.exe    #    g++
CPP_COMPILER_TYPE =      C:/rtools44/x86_64-w64-mingw32.static.posix/bin/gcc.exe   gcc
BASE_FLAGS =  -O3  -march=native  -mtune=native   -D_REENTRANT    -DSTAN_THREADS -pthread  -fPIC
BASE_FLAGS +=  -finline-limit=20000000 ## for g++


# Use C++17
CXX_STD = CXX17


BASE_FLAGS +=  -DNDEBUG  -ffp-contract=fast

BASE_FLAGS +=  -mfma -mavx -mavx2
###  BASE_FLAGS +=       -mfma  -mavx512vl -mavx512dq  -mavx512f

BASE_FLAGS += -fno-math-errno
BASE_FLAGS +=  -fno-signed-zeros
BASE_FLAGS +=  -fno-trapping-math

BASE_FLAGS +=       -DEIGEN_VECTORIZE

BASE_FLAGS +=  -finline-limit=20000000 ## for g++


PKG_CXXFLAGS += -fopenmp ### for g++
BASE_FLAGS +=  -fopenmp ### for g++


PKG_CPPFLAGS=$(BASE_FLAGS)



#######   -----  BayesmMVP  path
## PKG_PATH=$(HOME)/Documents/Work/PhD_work/R_packages/BayesMVP
## PKG_PATH=$(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(system.file(package='BayesMVP'))") ## for Windows

ifeq ($(OS),Windows_NT)
    PKG_PATH = $(shell cd)
else
    PKG_PATH = $(shell pwd)
endif


####### ---- load dummy model for bridgestan to compile (for Linux / Mac OS X)
PKG_LIBS+=$(PKG_PATH)/dummy_stan_model_model.dll


# Find R user library path for packages
RPKG_PATH = $(shell "${R_HOME}/bin${R_ARCH_BIN}/Rscript" -e "cat(.libPaths()[1])")


PKG_CPPFLAGS += -I"$(RPKG_PATH)/bridgestan/include" \
                -I"$(RPKG_PATH)/StanHeaders/include" \
                -I"$(RPKG_PATH)/RcppEigen/include" \
                -I"$(RPKG_PATH)/BH/include" \
                -I"$(RPKG_PATH)/RcppParallel/include"


##### Find cmdstan / Stan path (for Windows)
STAN_PATH = $(shell \
  if [ -d "$(HOME)/.cmdstan" ]; then \
    ls -d "$(HOME)/.cmdstan/cmdstan-"* 2>/dev/null | sort -rV | head -n1; \
  elif [ -d "$(HOME)/cmdstan" ]; then \
    echo "$(HOME)/cmdstan"; \
  fi)

STAN_SRC =  $(STAN_PATH)/src
STAN_MATH =  $(STAN_PATH)/lib/stan_math
TBB_PATH = $(STAN_MATH)/lib/tbb
TBB_SO = $(TBB_PATH)/tbb12.dll  ## .dll for Windows
PKG_LIBS += -Wl,-rpath,$(TBB_PATH)
PKG_LIBS += $(TBB_SO)

# other include paths

PKG_CPPFLAGS+=-I$(TBB_PATH)/include
PKG_CPPFLAGS+=-I"$(STAN_PATH)"
PKG_CPPFLAGS+=-I"$(STAN_PATH)/src"
PKG_CPPFLAGS+=-I"$(STAN_PATH)/lib/stan_math/"
PKG_CPPFLAGS+=-I"$(STAN_PATH)/lib/stan_math/lib/boost_1.84.0"
PKG_CPPFLAGS+=-I"$(STAN_PATH)/lib/stan_math/lib/eigen_3.4.0"
PKG_CPPFLAGS+=-I"$(STAN_PATH)/lib/stan_math/lib/sundials_6.1.1/include"

PKG_CPPFLAGS+=-I$(STAN_PATH)
PKG_CPPFLAGS+=-I$(STAN_SRC)
PKG_CPPFLAGS+=-I$(STAN_MATH)
PKG_CPPFLAGS+=-I$(STAN_SRC)/stan/model
PKG_CPPFLAGS+=-I$(STAN_SRC)/stan/services
PKG_CPPFLAGS+=-I$(STAN_SRC)/stan/io
PKG_CPPFLAGS+=-I$(STAN_SRC)/stan/mcmc




BRIDGESTAN_PATH = $(HOME)/bridgestan
BRIDGESTAN_SRC = $(BRIDGESTAN_PATH)/src
PKG_CPPFLAGS+=-I"$(BRIDGESTAN_SRC)"

PKG_CXXFLAGS = $(PKG_CPPFLAGS)  -std=c++17   -DBOOST_DISABLE_ASSERTS

CPPFLAGS += $(PKG_CPPFLAGS)
CXXFLAGS += $(PKG_CXXFLAGS)




CC =  $(CPP_COMPILER_TYPE)
CFLAGS =  $(BASE_FLAGS)
CC14 = $(CPP_COMPILER_TYPE)
C14FLAGS = $(BASE_FLAGS)
CC17 = $(CPP_COMPILER_TYPE)
C17FLAGS = $(BASE_FLAGS)
CC23 =  $(CPP_COMPILER_TYPE)
C23FLAGS =  $(BASE_FLAGS)
CC90 =  $(CPP_COMPILER_TYPE)
C90FLAGS = $(BASE_FLAGS)
CC99 =  $(CPP_COMPILER_TYPE)
99FLAGS = $(BASE_FLAGS)


CXX = $(CXX_COMPILER_TYPE)
CXXFLAGS = $(BASE_FLAGS)
CXXPICFLAGS = -fpic

CXX11 = $(CXX_COMPILER_TYPE)
CXX11FLAGS = $(BASE_FLAGS)
CXX11PICFLAGS = -fpic

CXX14 = $(CXX_COMPILER_TYPE)
CXX14FLAGS = $(BASE_FLAGS)
CXX14PICFLAGS = -fpic

CXX17 = $(CXX_COMPILER_TYPE)
CXX17FLAGS =  $(BASE_FLAGS)
CXX17PICFLAGS = -fpic

CXX20 = $(CXX_COMPILER_TYPE)
CXX20FLAGS =   $(BASE_FLAGS)
CXX20PICFLAGS = -fpic

CXX23 = $(CXX_COMPILER_TYPE)
CXX23FLAGS =   $(BASE_FLAGS)
CXX23PICFLAGS = -fpic










